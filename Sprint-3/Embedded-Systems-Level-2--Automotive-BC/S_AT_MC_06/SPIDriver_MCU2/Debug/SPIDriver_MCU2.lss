
SPIDriver_MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000002d0  00000364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800064  00800064  00000368  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011af  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000729  00000000  00000000  0000163b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000594  00000000  00000000  00001d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  000022f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000826  00000000  00000000  00002440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e9  00000000  00000000  00002c66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000344f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 38       	cpi	r26, 0x89	; 137
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
  8a:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_PinInit>:
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;	
}
  92:	80 32       	cpi	r24, 0x20	; 32
  94:	b0 f5       	brcc	.+108    	; 0x102 <DIO_PinInit+0x70>
  96:	62 30       	cpi	r22, 0x02	; 2
  98:	b0 f5       	brcc	.+108    	; 0x106 <DIO_PinInit+0x74>
  9a:	42 30       	cpi	r20, 0x02	; 2
  9c:	b0 f5       	brcc	.+108    	; 0x10a <DIO_PinInit+0x78>
  9e:	e8 2f       	mov	r30, r24
  a0:	e6 95       	lsr	r30
  a2:	e6 95       	lsr	r30
  a4:	e6 95       	lsr	r30
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	e0 5a       	subi	r30, 0xA0	; 160
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	e0 81       	ld	r30, Z
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	df 01       	movw	r26, r30
  b2:	5e 91       	ld	r21, -X
  b4:	98 2f       	mov	r25, r24
  b6:	97 70       	andi	r25, 0x07	; 7
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	09 2e       	mov	r0, r25
  be:	02 c0       	rjmp	.+4      	; 0xc4 <DIO_PinInit+0x32>
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	0a 94       	dec	r0
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <DIO_PinInit+0x2e>
  c8:	20 95       	com	r18
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	09 2e       	mov	r0, r25
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_PinInit+0x42>
  d0:	66 0f       	add	r22, r22
  d2:	77 1f       	adc	r23, r23
  d4:	0a 94       	dec	r0
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_PinInit+0x3e>
  d8:	35 2f       	mov	r19, r21
  da:	32 23       	and	r19, r18
  dc:	63 2b       	or	r22, r19
  de:	6c 93       	st	X, r22
  e0:	30 81       	ld	r19, Z
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_PinInit+0x58>
  e6:	44 0f       	add	r20, r20
  e8:	55 1f       	adc	r21, r21
  ea:	9a 95       	dec	r25
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_PinInit+0x54>
  ee:	23 23       	and	r18, r19
  f0:	42 2b       	or	r20, r18
  f2:	40 83       	st	Z, r20
  f4:	e8 2f       	mov	r30, r24
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	e8 59       	subi	r30, 0x98	; 152
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 83       	st	Z, r24
 100:	08 95       	ret
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	08 95       	ret
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	08 95       	ret
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	08 95       	ret

0000010e <DIO_PortInit>:
 10e:	84 30       	cpi	r24, 0x04	; 4
 110:	88 f4       	brcc	.+34     	; 0x134 <DIO_PortInit+0x26>
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	fc 01       	movw	r30, r24
 116:	e0 5a       	subi	r30, 0xA0	; 160
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	e0 81       	ld	r30, Z
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	df 01       	movw	r26, r30
 120:	11 97       	sbiw	r26, 0x01	; 1
 122:	6c 93       	st	X, r22
 124:	40 83       	st	Z, r20
 126:	fc 01       	movw	r30, r24
 128:	ec 59       	subi	r30, 0x9C	; 156
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	20 83       	st	Z, r18
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	08 95       	ret
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	08 95       	ret

00000138 <DIO_PortWrite>:
*************************************************************************************************/
enuErrorStatus_t DIO_PortWrite(enuDIOPortNo_t enuDIOPortNo, uint8_t u8PortData)
{
	enuErrorStatus_t enuRetVar;
	
	if(aenuDIOPortState[enuDIOPortNo] == DIO_INIT_DONE)
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	fc 01       	movw	r30, r24
 13c:	ec 59       	subi	r30, 0x9C	; 156
 13e:	ff 4f       	sbci	r31, 0xFF	; 255
 140:	20 81       	ld	r18, Z
 142:	21 30       	cpi	r18, 0x01	; 1
 144:	41 f4       	brne	.+16     	; 0x156 <DIO_PortWrite+0x1e>
	{
		/* Writing the value into the corresponding port */
		PORTx_R(enuDIOPortNo) = u8PortData;
 146:	fc 01       	movw	r30, r24
 148:	e0 5a       	subi	r30, 0xA0	; 160
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	e0 81       	ld	r30, Z
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	60 83       	st	Z, r22
		enuRetVar = E_OK;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
 156:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;	
}
 158:	08 95       	ret

0000015a <main>:
#include "SPI.h"
#include "DIO.h"


int main(void)
{	
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	1f 92       	push	r1
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8Data;

	DIO_PortInit(PORTD, 0xFF, 0x00);
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	6f ef       	ldi	r22, 0xFF	; 255
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_PortInit>
	SPI_Init(SPI_FOSC_OVER_128, SPI_CPHA_LOW, SPI_CPOL_LOW, SPI_SLAVE_MODE, SPI_MSB_TRANSMITTED_FIRST); 
 16e:	00 e0       	ldi	r16, 0x00	; 0
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_Init>
	SPI_ReceiveChar(&u8Data);
 17c:	ce 01       	movw	r24, r28
 17e:	01 96       	adiw	r24, 0x01	; 1
 180:	0e 94 59 01 	call	0x2b2	; 0x2b2 <SPI_ReceiveChar>
	DIO_PortWrite(PORTD, u8Data);	
 184:	69 81       	ldd	r22, Y+1	; 0x01
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	0e 94 9c 00 	call	0x138	; 0x138 <DIO_PortWrite>
 18c:	ff cf       	rjmp	.-2      	; 0x18c <main+0x32>

0000018e <SPI_Init>:
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;
}
 18e:	ff 92       	push	r15
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	88 30       	cpi	r24, 0x08	; 8
 19a:	08 f0       	brcs	.+2      	; 0x19e <SPI_Init+0x10>
 19c:	7b c0       	rjmp	.+246    	; 0x294 <SPI_Init+0x106>
 19e:	62 30       	cpi	r22, 0x02	; 2
 1a0:	08 f0       	brcs	.+2      	; 0x1a4 <SPI_Init+0x16>
 1a2:	7a c0       	rjmp	.+244    	; 0x298 <SPI_Init+0x10a>
 1a4:	42 30       	cpi	r20, 0x02	; 2
 1a6:	08 f0       	brcs	.+2      	; 0x1aa <SPI_Init+0x1c>
 1a8:	79 c0       	rjmp	.+242    	; 0x29c <SPI_Init+0x10e>
 1aa:	22 30       	cpi	r18, 0x02	; 2
 1ac:	08 f0       	brcs	.+2      	; 0x1b0 <SPI_Init+0x22>
 1ae:	78 c0       	rjmp	.+240    	; 0x2a0 <SPI_Init+0x112>
 1b0:	02 30       	cpi	r16, 0x02	; 2
 1b2:	08 f0       	brcs	.+2      	; 0x1b6 <SPI_Init+0x28>
 1b4:	77 c0       	rjmp	.+238    	; 0x2a4 <SPI_Init+0x116>
 1b6:	d2 2f       	mov	r29, r18
 1b8:	14 2f       	mov	r17, r20
 1ba:	f6 2e       	mov	r15, r22
 1bc:	c8 2f       	mov	r28, r24
 1be:	21 11       	cpse	r18, r1
 1c0:	15 c0       	rjmp	.+42     	; 0x1ec <SPI_Init+0x5e>
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	8c e0       	ldi	r24, 0x0C	; 12
 1c8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_PinInit>
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	8d e0       	ldi	r24, 0x0D	; 13
 1d2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_PinInit>
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	8e e0       	ldi	r24, 0x0E	; 14
 1dc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_PinInit>
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	8f e0       	ldi	r24, 0x0F	; 15
 1e6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_PinInit>
 1ea:	14 c0       	rjmp	.+40     	; 0x214 <SPI_Init+0x86>
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	8c e0       	ldi	r24, 0x0C	; 12
 1f2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_PinInit>
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	8d e0       	ldi	r24, 0x0D	; 13
 1fc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_PinInit>
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	8e e0       	ldi	r24, 0x0E	; 14
 206:	0e 94 49 00 	call	0x92	; 0x92 <DIO_PinInit>
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	8f e0       	ldi	r24, 0x0F	; 15
 210:	0e 94 49 00 	call	0x92	; 0x92 <DIO_PinInit>
 214:	2d b1       	in	r18, 0x0d	; 13
 216:	30 e1       	ldi	r19, 0x10	; 16
 218:	d3 9f       	mul	r29, r19
 21a:	c0 01       	movw	r24, r0
 21c:	11 24       	eor	r1, r1
 21e:	92 2f       	mov	r25, r18
 220:	9f 7e       	andi	r25, 0xEF	; 239
 222:	89 2b       	or	r24, r25
 224:	8d b9       	out	0x0d, r24	; 13
 226:	8d b1       	in	r24, 0x0d	; 13
 228:	8c 7f       	andi	r24, 0xFC	; 252
 22a:	8c 2b       	or	r24, r28
 22c:	8d b9       	out	0x0d, r24	; 13
 22e:	2e b1       	in	r18, 0x0e	; 14
 230:	8c 2f       	mov	r24, r28
 232:	84 70       	andi	r24, 0x04	; 4
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	95 95       	asr	r25
 238:	87 95       	ror	r24
 23a:	95 95       	asr	r25
 23c:	87 95       	ror	r24
 23e:	92 2f       	mov	r25, r18
 240:	9e 7f       	andi	r25, 0xFE	; 254
 242:	89 2b       	or	r24, r25
 244:	8e b9       	out	0x0e, r24	; 14
 246:	2d b1       	in	r18, 0x0d	; 13
 248:	8f 2d       	mov	r24, r15
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	92 2f       	mov	r25, r18
 256:	9b 7f       	andi	r25, 0xFB	; 251
 258:	89 2b       	or	r24, r25
 25a:	8d b9       	out	0x0d, r24	; 13
 25c:	2d b1       	in	r18, 0x0d	; 13
 25e:	81 2f       	mov	r24, r17
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	92 2f       	mov	r25, r18
 270:	97 7f       	andi	r25, 0xF7	; 247
 272:	89 2b       	or	r24, r25
 274:	8d b9       	out	0x0d, r24	; 13
 276:	8d b1       	in	r24, 0x0d	; 13
 278:	90 e2       	ldi	r25, 0x20	; 32
 27a:	09 9f       	mul	r16, r25
 27c:	80 01       	movw	r16, r0
 27e:	11 24       	eor	r1, r1
 280:	8f 7d       	andi	r24, 0xDF	; 223
 282:	08 2b       	or	r16, r24
 284:	0d b9       	out	0x0d, r16	; 13
 286:	8d b1       	in	r24, 0x0d	; 13
 288:	80 64       	ori	r24, 0x40	; 64
 28a:	8d b9       	out	0x0d, r24	; 13
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <enuSPIState>
 292:	09 c0       	rjmp	.+18     	; 0x2a6 <SPI_Init+0x118>
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	07 c0       	rjmp	.+14     	; 0x2a6 <SPI_Init+0x118>
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	05 c0       	rjmp	.+10     	; 0x2a6 <SPI_Init+0x118>
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	03 c0       	rjmp	.+6      	; 0x2a6 <SPI_Init+0x118>
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <SPI_Init+0x118>
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	1f 91       	pop	r17
 2ac:	0f 91       	pop	r16
 2ae:	ff 90       	pop	r15
 2b0:	08 95       	ret

000002b2 <SPI_ReceiveChar>:
* Parameters	: pu8Data
* Return Value	: enuErrorStatus_t
* Description  : Receive a character from another module
*************************************************************************************************/
enuErrorStatus_t SPI_ReceiveChar(uint8_t* pu8Data)
{
 2b2:	fc 01       	movw	r30, r24
	enuErrorStatus_t enuRetVar;
	
	if(enuSPIState == SPI_INIT_DONE)
 2b4:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <enuSPIState>
 2b8:	91 30       	cpi	r25, 0x01	; 1
 2ba:	31 f4       	brne	.+12     	; 0x2c8 <SPI_ReceiveChar+0x16>
	{		
		/* Waiting for the data until it has successfully been received */
		while(IS_BIT_CLEAR(SPSR_R, SPI_SPIF_BIT));
 2bc:	77 9b       	sbis	0x0e, 7	; 14
 2be:	fe cf       	rjmp	.-4      	; 0x2bc <SPI_ReceiveChar+0xa>
		/* Adding the value of the received data from the SPI data register into the data variable */
		*pu8Data = SPDR_R;
 2c0:	8f b1       	in	r24, 0x0f	; 15
 2c2:	80 83       	st	Z, r24
		enuRetVar = E_OK;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
 2c8:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
 2ca:	08 95       	ret

000002cc <_exit>:
 2cc:	f8 94       	cli

000002ce <__stop_program>:
 2ce:	ff cf       	rjmp	.-2      	; 0x2ce <__stop_program>
