
InterfacingEEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000728  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000728  000007bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800080  00800080  000007dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000080c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015d1  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086e  00000000  00000000  00001f29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009cc  00000000  00000000  00002797  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00003164  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d51  00000000  00000000  00003380  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a17  00000000  00000000  000040d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004ae8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 97 01 	call	0x32e	; 0x32e <main>
  8a:	0c 94 92 03 	jmp	0x724	; 0x724 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <App_Init>:
#include "App.h"


void App_Init(void)
{
  92:	0f 93       	push	r16
	UART_Init(9600, UART_EIGHT_CHARACTER_BITS, UART_ONE_STOP_BIT, UART_DISABLE_PARITY);
  94:	00 e0       	ldi	r16, 0x00	; 0
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	43 e0       	ldi	r20, 0x03	; 3
  9a:	60 e8       	ldi	r22, 0x80	; 128
  9c:	75 e2       	ldi	r23, 0x25	; 37
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 0a 02 	call	0x414	; 0x414 <UART_Init>
	EEPROM_Init(32, TWI_FOSC_OVER_1);
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	80 e2       	ldi	r24, 0x20	; 32
  aa:	0e 94 c3 00 	call	0x186	; 0x186 <EEPROM_Init>
}
  ae:	0f 91       	pop	r16
  b0:	08 95       	ret

000000b2 <App_Update>:

void App_Update(void)
{
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  be:	67 97       	sbiw	r28, 0x17	; 23
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	f8 94       	cli
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8Command[6];
	uint8_t au8Address[16];
	uint16_t u16Address;
	uint8_t u8Data;
	
	UART_ReceiveString(au8Command);
  ca:	ce 01       	movw	r24, r28
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	0e 94 24 03 	call	0x648	; 0x648 <UART_ReceiveString>
	if((au8Command[0] == 'W') && (au8Command[1] == 'R') && (au8Command[2] == 'I') && (au8Command[3] == 'T') && (au8Command[4] == 'E')) 
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	87 35       	cpi	r24, 0x57	; 87
  d6:	31 f5       	brne	.+76     	; 0x124 <App_Update+0x72>
  d8:	9a 81       	ldd	r25, Y+2	; 0x02
  da:	92 35       	cpi	r25, 0x52	; 82
  dc:	19 f5       	brne	.+70     	; 0x124 <App_Update+0x72>
  de:	9b 81       	ldd	r25, Y+3	; 0x03
  e0:	99 34       	cpi	r25, 0x49	; 73
  e2:	01 f5       	brne	.+64     	; 0x124 <App_Update+0x72>
  e4:	9c 81       	ldd	r25, Y+4	; 0x04
  e6:	94 35       	cpi	r25, 0x54	; 84
  e8:	e9 f4       	brne	.+58     	; 0x124 <App_Update+0x72>
  ea:	9d 81       	ldd	r25, Y+5	; 0x05
  ec:	95 34       	cpi	r25, 0x45	; 69
  ee:	d1 f4       	brne	.+52     	; 0x124 <App_Update+0x72>
	{
		UART_ReceiveString(au8Address);
  f0:	ce 01       	movw	r24, r28
  f2:	07 96       	adiw	r24, 0x07	; 7
  f4:	0e 94 24 03 	call	0x648	; 0x648 <UART_ReceiveString>
		u16Address = atoi((char*)au8Address);
  f8:	ce 01       	movw	r24, r28
  fa:	07 96       	adiw	r24, 0x07	; 7
  fc:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <atoi>
 100:	8c 01       	movw	r16, r24
		UART_SendString((uint8_t*)"OK\r");
 102:	80 e6       	ldi	r24, 0x60	; 96
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 f5 02 	call	0x5ea	; 0x5ea <UART_SendString>
		UART_ReceiveData((uint16_t*)&u8Data);
 10a:	ce 01       	movw	r24, r28
 10c:	47 96       	adiw	r24, 0x17	; 23
 10e:	0e 94 ce 02 	call	0x59c	; 0x59c <UART_ReceiveData>
		UART_SendString((uint8_t*)"\rOK\r\r");
 112:	84 e6       	ldi	r24, 0x64	; 100
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 f5 02 	call	0x5ea	; 0x5ea <UART_SendString>
		EEPROM_Write(u16Address, u8Data);		
 11a:	6f 89       	ldd	r22, Y+23	; 0x17
 11c:	c8 01       	movw	r24, r16
 11e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <EEPROM_Write>
 122:	26 c0       	rjmp	.+76     	; 0x170 <App_Update+0xbe>
	}
	else if((au8Command[0] == 'R') && (au8Command[1] == 'E') && (au8Command[2] == 'A') && (au8Command[3] == 'D'))
 124:	82 35       	cpi	r24, 0x52	; 82
 126:	21 f5       	brne	.+72     	; 0x170 <App_Update+0xbe>
 128:	8a 81       	ldd	r24, Y+2	; 0x02
 12a:	85 34       	cpi	r24, 0x45	; 69
 12c:	09 f5       	brne	.+66     	; 0x170 <App_Update+0xbe>
 12e:	8b 81       	ldd	r24, Y+3	; 0x03
 130:	81 34       	cpi	r24, 0x41	; 65
 132:	f1 f4       	brne	.+60     	; 0x170 <App_Update+0xbe>
 134:	8c 81       	ldd	r24, Y+4	; 0x04
 136:	84 34       	cpi	r24, 0x44	; 68
 138:	d9 f4       	brne	.+54     	; 0x170 <App_Update+0xbe>
	{
		UART_ReceiveString(au8Address);
 13a:	ce 01       	movw	r24, r28
 13c:	07 96       	adiw	r24, 0x07	; 7
 13e:	0e 94 24 03 	call	0x648	; 0x648 <UART_ReceiveString>
		u16Address = atoi((char*)au8Address);
 142:	ce 01       	movw	r24, r28
 144:	07 96       	adiw	r24, 0x07	; 7
 146:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <atoi>
 14a:	8c 01       	movw	r16, r24
		UART_SendString((uint8_t*)"OK\r");
 14c:	80 e6       	ldi	r24, 0x60	; 96
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 f5 02 	call	0x5ea	; 0x5ea <UART_SendString>
		EEPROM_Read(u16Address, &u8Data);
 154:	be 01       	movw	r22, r28
 156:	69 5e       	subi	r22, 0xE9	; 233
 158:	7f 4f       	sbci	r23, 0xFF	; 255
 15a:	c8 01       	movw	r24, r16
 15c:	0e 94 24 01 	call	0x248	; 0x248 <EEPROM_Read>
		UART_SendString((uint8_t*)"The data stored is: ");
 160:	8a e6       	ldi	r24, 0x6A	; 106
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 f5 02 	call	0x5ea	; 0x5ea <UART_SendString>
		UART_SendData(u8Data);
 168:	8f 89       	ldd	r24, Y+23	; 0x17
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 af 02 	call	0x55e	; 0x55e <UART_SendData>
	}
	else
	{
	}
}
 170:	67 96       	adiw	r28, 0x17	; 23
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	f8 94       	cli
 176:	de bf       	out	0x3e, r29	; 62
 178:	0f be       	out	0x3f, r0	; 63
 17a:	cd bf       	out	0x3d, r28	; 61
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	0f 91       	pop	r16
 184:	08 95       	ret

00000186 <EEPROM_Init>:
*************************************************************************************************/
enuErrorStatus_t EEPROM_Init(uint8_t u8TWIBitRate, enuTWIPrescalerSelect_t enuTWIPrescalerSelect)
{
	enuErrorStatus_t enuRetVar = E_OK;
	
	if((u8TWIBitRate > EEPROM_TWI_BIT_RATE_MIN_VALUE)							&& (u8TWIBitRate < EEPROM_TWI_BIT_RATE_MAX_VALUE) &&
 186:	96 ef       	ldi	r25, 0xF6	; 246
 188:	98 0f       	add	r25, r24
 18a:	96 37       	cpi	r25, 0x76	; 118
 18c:	40 f4       	brcc	.+16     	; 0x19e <EEPROM_Init+0x18>
		(enuTWIPrescalerSelect > EEPROM_TWI_PRESCALER_SELECT_MIN_VALUE)	&& (enuTWIPrescalerSelect < EEPROM_TWI_PRESCALER_SELECT_MAX_VALUE))
 18e:	64 30       	cpi	r22, 0x04	; 4
 190:	40 f4       	brcc	.+16     	; 0x1a2 <EEPROM_Init+0x1c>
	{	
		/* Initializing the TWI module as master with the input configuration parameters */
		TWI_MasterInit(u8TWIBitRate, enuTWIPrescalerSelect);
 192:	0e 94 9c 01 	call	0x338	; 0x338 <TWI_MasterInit>
		enuEEPROMState = EEPROM_INIT_DONE;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
		enuRetVar = E_OK;
 19c:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	08 95       	ret
 1a2:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
 1a4:	08 95       	ret

000001a6 <EEPROM_Write>:
* Parameters	: u16Address, u8Data
* Return Value	: enuErrorStatus_t
* Description  : Initialize one DIO pin according to the configuration
*************************************************************************************************/
enuErrorStatus_t EEPROM_Write(uint16_t u16Address, uint8_t u8Data)
{
 1a6:	ff 92       	push	r15
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	1f 92       	push	r1
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
 1b6:	9c 01       	movw	r18, r24
	enuErrorStatus_t enuRetVar;
	enuTWIStatus_t enuTWIStatus;
	
	if(enuEEPROMState == EEPROM_INIT_DONE)
 1b8:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <__data_end>
 1bc:	91 30       	cpi	r25, 0x01	; 1
 1be:	a1 f5       	brne	.+104    	; 0x228 <EEPROM_Write+0x82>
 1c0:	f6 2e       	mov	r15, r22
 1c2:	89 01       	movw	r16, r18
	{
		/* Sending a start condition to start communication */
		TWI_Start();
 1c4:	0e 94 e7 01 	call	0x3ce	; 0x3ce <TWI_Start>
		/* Checking the status of the TWI module */
		TWI_CheckStatus(&enuTWIStatus);
 1c8:	ce 01       	movw	r24, r28
 1ca:	01 96       	adiw	r24, 0x01	; 1
 1cc:	0e 94 db 01 	call	0x3b6	; 0x3b6 <TWI_CheckStatus>
		if(enuTWIStatus == TWI_MASTER_START_CONDITION_CODE)
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	88 30       	cpi	r24, 0x08	; 8
 1d4:	59 f5       	brne	.+86     	; 0x22c <EEPROM_Write+0x86>
		{
			/* Sending the slave address of EEPROM + the page number + write condition */
			TWI_Write(EEPROM_SLAVE_ADDRESS | EEPROM_PAGE_NUMBER(u16Address) | EEPROM_WRITE_BIT_VALUE);
 1d6:	c8 01       	movw	r24, r16
 1d8:	88 0f       	add	r24, r24
 1da:	89 2f       	mov	r24, r25
 1dc:	88 1f       	adc	r24, r24
 1de:	99 0b       	sbc	r25, r25
 1e0:	91 95       	neg	r25
 1e2:	8e 70       	andi	r24, 0x0E	; 14
 1e4:	80 6a       	ori	r24, 0xA0	; 160
 1e6:	0e 94 b2 01 	call	0x364	; 0x364 <TWI_Write>
			/* Checking the status of the TWI module */
			TWI_CheckStatus(&enuTWIStatus);
 1ea:	ce 01       	movw	r24, r28
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	0e 94 db 01 	call	0x3b6	; 0x3b6 <TWI_CheckStatus>
			if(enuTWIStatus == TWI_MASTER_SLA_W_ACK_CONDITION_CODE)
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	88 31       	cpi	r24, 0x18	; 24
 1f6:	e1 f4       	brne	.+56     	; 0x230 <EEPROM_Write+0x8a>
			{
				/* Sending the byte address of the desired location in the EEPROM */
				TWI_Write((uint8_t)u16Address);
 1f8:	80 2f       	mov	r24, r16
 1fa:	0e 94 b2 01 	call	0x364	; 0x364 <TWI_Write>
				/* Checking the status of the TWI module */
				TWI_CheckStatus(&enuTWIStatus);
 1fe:	ce 01       	movw	r24, r28
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	0e 94 db 01 	call	0x3b6	; 0x3b6 <TWI_CheckStatus>
				if(enuTWIStatus == TWI_MASTER_DATA_W_ACK_CONDITION_CODE)
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	88 32       	cpi	r24, 0x28	; 40
 20a:	a1 f4       	brne	.+40     	; 0x234 <EEPROM_Write+0x8e>
				{
					/* Sending the desired data in order to be written in this specific location */
					TWI_Write(u8Data);
 20c:	8f 2d       	mov	r24, r15
 20e:	0e 94 b2 01 	call	0x364	; 0x364 <TWI_Write>
					/* Checking the status of the TWI module */		
					TWI_CheckStatus(&enuTWIStatus);
 212:	ce 01       	movw	r24, r28
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	0e 94 db 01 	call	0x3b6	; 0x3b6 <TWI_CheckStatus>
					if(enuTWIStatus == TWI_MASTER_DATA_W_ACK_CONDITION_CODE)
 21a:	89 81       	ldd	r24, Y+1	; 0x01
 21c:	88 32       	cpi	r24, 0x28	; 40
 21e:	61 f4       	brne	.+24     	; 0x238 <EEPROM_Write+0x92>
					{
						/* Sending a stop condition to stop communication */
						TWI_Stop();	
 220:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <TWI_Stop>
						enuRetVar = E_OK;
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	09 c0       	rjmp	.+18     	; 0x23a <EEPROM_Write+0x94>
			enuRetVar = E_ERROR;		
		}
	}
	else
	{
		enuRetVar = E_ERROR;
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	07 c0       	rjmp	.+14     	; 0x23a <EEPROM_Write+0x94>
				enuRetVar = E_ERROR;
			}
		}
		else
		{
			enuRetVar = E_ERROR;		
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	05 c0       	rjmp	.+10     	; 0x23a <EEPROM_Write+0x94>
					enuRetVar = E_ERROR;
				}
			}
			else
			{
				enuRetVar = E_ERROR;
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	03 c0       	rjmp	.+6      	; 0x23a <EEPROM_Write+0x94>
						enuRetVar = E_ERROR;
					}
				}
				else
				{
					enuRetVar = E_ERROR;
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	01 c0       	rjmp	.+2      	; 0x23a <EEPROM_Write+0x94>
						TWI_Stop();	
						enuRetVar = E_OK;
					}
					else
					{
						enuRetVar = E_ERROR;
 238:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;	
}
 23a:	0f 90       	pop	r0
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	08 95       	ret

00000248 <EEPROM_Read>:
* Parameters	: u16Address, pu8Data
* Return Value	: enuErrorStatus_t
* Description  : Initialize one DIO pin according to the configuration
*************************************************************************************************/
enuErrorStatus_t EEPROM_Read(uint16_t u16Address, uint8_t* pu8Data)
{
 248:	ef 92       	push	r14
 24a:	ff 92       	push	r15
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	00 d0       	rcall	.+0      	; 0x256 <EEPROM_Read+0xe>
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
 25a:	9c 01       	movw	r18, r24
	enuErrorStatus_t enuRetVar;
	enuTWIStatus_t enuTWIStatus;
	
	if(enuEEPROMState == EEPROM_INIT_DONE)
 25c:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <__data_end>
 260:	91 30       	cpi	r25, 0x01	; 1
 262:	09 f0       	breq	.+2      	; 0x266 <EEPROM_Read+0x1e>
 264:	4e c0       	rjmp	.+156    	; 0x302 <EEPROM_Read+0xba>
 266:	7b 01       	movw	r14, r22
 268:	89 01       	movw	r16, r18
	{
		/* Sending a start condition to start communication */		
		TWI_Start();
 26a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <TWI_Start>
		/* Checking the status of the TWI module */
		TWI_CheckStatus(&enuTWIStatus);
 26e:	ce 01       	movw	r24, r28
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	0e 94 db 01 	call	0x3b6	; 0x3b6 <TWI_CheckStatus>
		if(enuTWIStatus == TWI_MASTER_START_CONDITION_CODE)
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	88 30       	cpi	r24, 0x08	; 8
 27a:	09 f0       	breq	.+2      	; 0x27e <EEPROM_Read+0x36>
 27c:	44 c0       	rjmp	.+136    	; 0x306 <EEPROM_Read+0xbe>
		{		
			/* Sending the slave address of EEPROM + the page number + write condition */			
			TWI_Write(EEPROM_SLAVE_ADDRESS | EEPROM_PAGE_NUMBER(u16Address) | EEPROM_WRITE_BIT_VALUE);
 27e:	c8 01       	movw	r24, r16
 280:	88 0f       	add	r24, r24
 282:	89 2f       	mov	r24, r25
 284:	88 1f       	adc	r24, r24
 286:	99 0b       	sbc	r25, r25
 288:	91 95       	neg	r25
 28a:	28 2f       	mov	r18, r24
 28c:	2e 70       	andi	r18, 0x0E	; 14
 28e:	2a 83       	std	Y+2, r18	; 0x02
 290:	82 2f       	mov	r24, r18
 292:	80 6a       	ori	r24, 0xA0	; 160
 294:	0e 94 b2 01 	call	0x364	; 0x364 <TWI_Write>
			/* Checking the status of the TWI module */
			TWI_CheckStatus(&enuTWIStatus);
 298:	ce 01       	movw	r24, r28
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <TWI_CheckStatus>
			if(enuTWIStatus == TWI_MASTER_SLA_W_ACK_CONDITION_CODE)
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	88 31       	cpi	r24, 0x18	; 24
 2a4:	91 f5       	brne	.+100    	; 0x30a <EEPROM_Read+0xc2>
			{
				/* Sending the byte address of the desired location in the EEPROM */				
				TWI_Write((uint8_t)u16Address);
 2a6:	80 2f       	mov	r24, r16
 2a8:	0e 94 b2 01 	call	0x364	; 0x364 <TWI_Write>
				/* Checking the status of the TWI module */		
				TWI_CheckStatus(&enuTWIStatus);
 2ac:	ce 01       	movw	r24, r28
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	0e 94 db 01 	call	0x3b6	; 0x3b6 <TWI_CheckStatus>
				if(enuTWIStatus == TWI_MASTER_DATA_W_ACK_CONDITION_CODE)
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	88 32       	cpi	r24, 0x28	; 40
 2b8:	51 f5       	brne	.+84     	; 0x30e <EEPROM_Read+0xc6>
				{
					/* Sending a restart condition to start communication */		
					TWI_Start();
 2ba:	0e 94 e7 01 	call	0x3ce	; 0x3ce <TWI_Start>
					/* Checking the status of the TWI module */				
					TWI_CheckStatus(&enuTWIStatus);
 2be:	ce 01       	movw	r24, r28
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	0e 94 db 01 	call	0x3b6	; 0x3b6 <TWI_CheckStatus>
					if(enuTWIStatus == TWI_MASTER_RESTART_CONDITION_CODE)
 2c6:	89 81       	ldd	r24, Y+1	; 0x01
 2c8:	80 31       	cpi	r24, 0x10	; 16
 2ca:	19 f5       	brne	.+70     	; 0x312 <EEPROM_Read+0xca>
					{
						/* Sending the slave address of EEPROM + the page number + read condition */
						TWI_Write(EEPROM_SLAVE_ADDRESS | EEPROM_PAGE_NUMBER(u16Address) | EEPROM_READ_BIT_VALUE);
 2cc:	8a 81       	ldd	r24, Y+2	; 0x02
 2ce:	81 6a       	ori	r24, 0xA1	; 161
 2d0:	0e 94 b2 01 	call	0x364	; 0x364 <TWI_Write>
						/* Checking the status of the TWI module */				
						TWI_CheckStatus(&enuTWIStatus);
 2d4:	ce 01       	movw	r24, r28
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <TWI_CheckStatus>
						if(enuTWIStatus == TWI_MASTER_SLA_R_ACK_CONDITION_CODE)
 2dc:	89 81       	ldd	r24, Y+1	; 0x01
 2de:	80 34       	cpi	r24, 0x40	; 64
 2e0:	d1 f4       	brne	.+52     	; 0x316 <EEPROM_Read+0xce>
						{
							/* Reading the desired data from this specific location */
							TWI_Read(pu8Data);
 2e2:	c7 01       	movw	r24, r14
 2e4:	0e 94 c7 01 	call	0x38e	; 0x38e <TWI_Read>
							/* Checking the status of the TWI module */				
							TWI_CheckStatus(&enuTWIStatus);
 2e8:	ce 01       	movw	r24, r28
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	0e 94 db 01 	call	0x3b6	; 0x3b6 <TWI_CheckStatus>
							if((enuTWIStatus == TWI_MASTER_DATA_R_ACK_CONDITION_CODE) || (enuTWIStatus == TWI_MASTER_DATA_R_NACK_CONDITION_CODE))
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	80 35       	cpi	r24, 0x50	; 80
 2f4:	11 f0       	breq	.+4      	; 0x2fa <EEPROM_Read+0xb2>
 2f6:	88 35       	cpi	r24, 0x58	; 88
 2f8:	81 f4       	brne	.+32     	; 0x31a <EEPROM_Read+0xd2>
							{
								/* Sending a stop condition to stop communication */
								TWI_Stop();
 2fa:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <TWI_Stop>
								enuRetVar = E_OK;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0d c0       	rjmp	.+26     	; 0x31c <EEPROM_Read+0xd4>
			enuRetVar = E_ERROR;		
		}
	}
	else
	{
		enuRetVar = E_ERROR;
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0b c0       	rjmp	.+22     	; 0x31c <EEPROM_Read+0xd4>
				enuRetVar = E_ERROR;
			}
		}
		else
		{
			enuRetVar = E_ERROR;		
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	09 c0       	rjmp	.+18     	; 0x31c <EEPROM_Read+0xd4>
					enuRetVar = E_ERROR;
				}
			}
			else
			{
				enuRetVar = E_ERROR;
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	07 c0       	rjmp	.+14     	; 0x31c <EEPROM_Read+0xd4>
						enuRetVar = E_ERROR;
					}
				}
				else
				{
					enuRetVar = E_ERROR;
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	05 c0       	rjmp	.+10     	; 0x31c <EEPROM_Read+0xd4>
							enuRetVar = E_ERROR;
						}
					}
					else
					{
						enuRetVar = E_ERROR;
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	03 c0       	rjmp	.+6      	; 0x31c <EEPROM_Read+0xd4>
								enuRetVar = E_ERROR;								
							}
						}
						else
						{
							enuRetVar = E_ERROR;
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	01 c0       	rjmp	.+2      	; 0x31c <EEPROM_Read+0xd4>
								TWI_Stop();
								enuRetVar = E_OK;
							}
							else
							{
								enuRetVar = E_ERROR;								
 31a:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;	
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	1f 91       	pop	r17
 326:	0f 91       	pop	r16
 328:	ff 90       	pop	r15
 32a:	ef 90       	pop	r14
 32c:	08 95       	ret

0000032e <main>:
#include "App.h"


int main(void)
{
	App_Init();
 32e:	0e 94 49 00 	call	0x92	; 0x92 <App_Init>
   while(1) 
   {
		App_Update();
 332:	0e 94 59 00 	call	0xb2	; 0xb2 <App_Update>
 336:	fd cf       	rjmp	.-6      	; 0x332 <main+0x4>

00000338 <TWI_MasterInit>:
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;	
}
 338:	96 ef       	ldi	r25, 0xF6	; 246
 33a:	98 0f       	add	r25, r24
 33c:	96 37       	cpi	r25, 0x76	; 118
 33e:	70 f4       	brcc	.+28     	; 0x35c <TWI_MasterInit+0x24>
 340:	64 30       	cpi	r22, 0x04	; 4
 342:	70 f4       	brcc	.+28     	; 0x360 <TWI_MasterInit+0x28>
 344:	80 b9       	out	0x00, r24	; 0
 346:	81 b1       	in	r24, 0x01	; 1
 348:	8c 7f       	andi	r24, 0xFC	; 252
 34a:	68 2b       	or	r22, r24
 34c:	61 b9       	out	0x01, r22	; 1
 34e:	86 b7       	in	r24, 0x36	; 54
 350:	84 60       	ori	r24, 0x04	; 4
 352:	86 bf       	out	0x36, r24	; 54
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <enuTWIState>
 35a:	08 95       	ret
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	08 95       	ret
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	08 95       	ret

00000364 <TWI_Write>:
*************************************************************************************************/
enuErrorStatus_t TWI_Write(uint8_t u8Data)
{
	enuErrorStatus_t enuRetVar;

	if(enuTWIState == TWI_INIT_DONE)
 364:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <enuTWIState>
 368:	91 30       	cpi	r25, 0x01	; 1
 36a:	79 f4       	brne	.+30     	; 0x38a <TWI_Write+0x26>
	{
		/* Loading the input data byte into the data register */
		TWDR_R = u8Data;
 36c:	83 b9       	out	0x03, r24	; 3
		/* Clearing the TWI interrupt flag */
		SET_BIT(TWCR_R, TWI_INT_FLAG_BIT);
 36e:	86 b7       	in	r24, 0x36	; 54
 370:	80 68       	ori	r24, 0x80	; 128
 372:	86 bf       	out	0x36, r24	; 54
		/* Enabling the TWI module */
		SET_BIT(TWCR_R, TWI_EN_BIT);
 374:	86 b7       	in	r24, 0x36	; 54
 376:	84 60       	ori	r24, 0x04	; 4
 378:	86 bf       	out	0x36, r24	; 54
		/* Clearing the previous start condition */
		CLEAR_BIT(TWCR_R, TWI_START_CONDITION_BIT);
 37a:	86 b7       	in	r24, 0x36	; 54
 37c:	8f 7d       	andi	r24, 0xDF	; 223
 37e:	86 bf       	out	0x36, r24	; 54
		/* Waiting for the data to be transmitted */
		while(IS_BIT_CLEAR(TWCR_R, TWI_INT_FLAG_BIT));
 380:	06 b6       	in	r0, 0x36	; 54
 382:	07 fe       	sbrs	r0, 7
 384:	fd cf       	rjmp	.-6      	; 0x380 <TWI_Write+0x1c>
		enuRetVar = E_OK;		
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
 38a:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
 38c:	08 95       	ret

0000038e <TWI_Read>:
* Parameters	: pu8Data
* Return Value	: enuErrorStatus_t
* Description  : Read the data from the TWI bus
*************************************************************************************************/
enuErrorStatus_t TWI_Read(uint8_t* pu8Data)
{
 38e:	fc 01       	movw	r30, r24
	enuErrorStatus_t enuRetVar;

	if(enuTWIState == TWI_INIT_DONE)
 390:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <enuTWIState>
 394:	91 30       	cpi	r25, 0x01	; 1
 396:	69 f4       	brne	.+26     	; 0x3b2 <TWI_Read+0x24>
	{
		/* Clearing the TWI interrupt flag */
		SET_BIT(TWCR_R, TWI_INT_FLAG_BIT);
 398:	96 b7       	in	r25, 0x36	; 54
 39a:	90 68       	ori	r25, 0x80	; 128
 39c:	96 bf       	out	0x36, r25	; 54
		/* Enabling the TWI module */
		SET_BIT(TWCR_R, TWI_EN_BIT);
 39e:	96 b7       	in	r25, 0x36	; 54
 3a0:	94 60       	ori	r25, 0x04	; 4
 3a2:	96 bf       	out	0x36, r25	; 54
		/* Waiting for the data to be received */
		while(IS_BIT_CLEAR(TWCR_R, TWI_INT_FLAG_BIT));
 3a4:	06 b6       	in	r0, 0x36	; 54
 3a6:	07 fe       	sbrs	r0, 7
 3a8:	fd cf       	rjmp	.-6      	; 0x3a4 <TWI_Read+0x16>
		/* Fetching the value of the received data from the data register */
		*pu8Data = TWDR_R;
 3aa:	83 b1       	in	r24, 0x03	; 3
 3ac:	80 83       	st	Z, r24
		enuRetVar = E_OK;		
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
 3b2:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
 3b4:	08 95       	ret

000003b6 <TWI_CheckStatus>:
* Parameters	: penuTWIStatus
* Return Value	: enuErrorStatus_t
* Description  : Check the current status of the TWI module
*************************************************************************************************/
enuErrorStatus_t TWI_CheckStatus(enuTWIStatus_t* penuTWIStatus)
{
 3b6:	fc 01       	movw	r30, r24
	enuErrorStatus_t enuRetVar;

	if(enuTWIState == TWI_INIT_DONE)
 3b8:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <enuTWIState>
 3bc:	91 30       	cpi	r25, 0x01	; 1
 3be:	29 f4       	brne	.+10     	; 0x3ca <TWI_CheckStatus+0x14>
	{
		/* Checking the current status of the TWI module */
		*penuTWIStatus = TWI_GET_STATUS(TWSR_R);
 3c0:	91 b1       	in	r25, 0x01	; 1
 3c2:	98 7f       	andi	r25, 0xF8	; 248
 3c4:	90 83       	st	Z, r25
		enuRetVar = E_OK;		
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
 3ca:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
 3cc:	08 95       	ret

000003ce <TWI_Start>:
*************************************************************************************************/
enuErrorStatus_t TWI_Start(void)
{
	enuErrorStatus_t enuRetVar;

	if(enuTWIState == TWI_INIT_DONE)
 3ce:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <enuTWIState>
 3d2:	81 30       	cpi	r24, 0x01	; 1
 3d4:	61 f4       	brne	.+24     	; 0x3ee <TWI_Start+0x20>
	{
		/* Initiating the transmission operation by a START condition bit */
		SET_BIT(TWCR_R, TWI_START_CONDITION_BIT);
 3d6:	86 b7       	in	r24, 0x36	; 54
 3d8:	80 62       	ori	r24, 0x20	; 32
 3da:	86 bf       	out	0x36, r24	; 54
		/* Clearing the TWI interrupt flag */
		SET_BIT(TWCR_R, TWI_INT_FLAG_BIT);
 3dc:	86 b7       	in	r24, 0x36	; 54
 3de:	80 68       	ori	r24, 0x80	; 128
 3e0:	86 bf       	out	0x36, r24	; 54
		/* Enabling the TWI module */
		SET_BIT(TWCR_R, TWI_EN_BIT);
 3e2:	86 b7       	in	r24, 0x36	; 54
 3e4:	84 60       	ori	r24, 0x04	; 4
 3e6:	86 bf       	out	0x36, r24	; 54
		/* Waiting for the start bit to be transmitted */
		while(IS_BIT_CLEAR(TWCR_R, TWI_INT_FLAG_BIT));
 3e8:	06 b6       	in	r0, 0x36	; 54
 3ea:	07 fe       	sbrs	r0, 7
 3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <TWI_Start+0x1a>
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;
}
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	08 95       	ret

000003f2 <TWI_Stop>:
*************************************************************************************************/
enuErrorStatus_t TWI_Stop(void)
{
	enuErrorStatus_t enuRetVar;

	if(enuTWIState == TWI_INIT_DONE)
 3f2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <enuTWIState>
 3f6:	81 30       	cpi	r24, 0x01	; 1
 3f8:	59 f4       	brne	.+22     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
	{
		/* Clearing the TWI interrupt flag */
		SET_BIT(TWCR_R, TWI_INT_FLAG_BIT);
 3fa:	86 b7       	in	r24, 0x36	; 54
 3fc:	80 68       	ori	r24, 0x80	; 128
 3fe:	86 bf       	out	0x36, r24	; 54
		/* Enabling the TWI module */
		SET_BIT(TWCR_R, TWI_EN_BIT);
 400:	86 b7       	in	r24, 0x36	; 54
 402:	84 60       	ori	r24, 0x04	; 4
 404:	86 bf       	out	0x36, r24	; 54
		/* Terminating the transmission operation by a STOP condition bit */
		SET_BIT(TWCR_R, TWI_STOP_CONDITION_BIT);
 406:	86 b7       	in	r24, 0x36	; 54
 408:	80 61       	ori	r24, 0x10	; 16
 40a:	86 bf       	out	0x36, r24	; 54
		enuRetVar = E_OK;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
 410:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
 412:	08 95       	ret

00000414 <UART_Init>:
*					  enuUARTDoubleTransmissionSpeed
* Return Value	: enuErrorStatus_t
* Description  : Initialize UART module according to the configuration
*************************************************************************************************/
enuErrorStatus_t UART_Init(uint32_t u32UARTBaudrate, enuUARTCharacterSize_t enuUARTCharacterSize, enuUARTStopBitSelect_t enuUARTStopBitSelect, enuUARTParityMode_t enuUARTParityMode)
{
 414:	ff 92       	push	r15
 416:	0f 93       	push	r16
 418:	1f 93       	push	r17
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	00 d0       	rcall	.+0      	; 0x420 <UART_Init+0xc>
 420:	cd b7       	in	r28, 0x3d	; 61
 422:	de b7       	in	r29, 0x3e	; 62
 424:	14 2f       	mov	r17, r20
 426:	f2 2e       	mov	r15, r18
	enuErrorStatus_t enuRetVar;
	volatile uint16_t u16BaudrateValue;
	
	/* Checking that all configurations are correctly configured */
	if((u32UARTBaudrate >= UART_BAUDRATE_MIN_VALUE)												&& (u32UARTBaudrate <= UART_BAUDRATE_MAX_VALUE)						&&
 428:	61 34       	cpi	r22, 0x41	; 65
 42a:	22 e4       	ldi	r18, 0x42	; 66
 42c:	72 07       	cpc	r23, r18
 42e:	2f e0       	ldi	r18, 0x0F	; 15
 430:	82 07       	cpc	r24, r18
 432:	91 05       	cpc	r25, r1
 434:	08 f0       	brcs	.+2      	; 0x438 <UART_Init+0x24>
 436:	7c c0       	rjmp	.+248    	; 0x530 <UART_Init+0x11c>
		(enuUARTCharacterSize > UART_CHARACTER_SIZE_MIN_VALUE)								&& (enuUARTCharacterSize < UART_CHARACTER_SIZE_MAX_VALUE)		&&
 438:	48 30       	cpi	r20, 0x08	; 8
 43a:	08 f0       	brcs	.+2      	; 0x43e <UART_Init+0x2a>
 43c:	7b c0       	rjmp	.+246    	; 0x534 <UART_Init+0x120>
 43e:	44 30       	cpi	r20, 0x04	; 4
 440:	09 f4       	brne	.+2      	; 0x444 <UART_Init+0x30>
 442:	7a c0       	rjmp	.+244    	; 0x538 <UART_Init+0x124>
		(enuUARTCharacterSize != UART_CHARACTER_SIZE_STATE4_VALUE)							&& (enuUARTCharacterSize != UART_CHARACTER_SIZE_STATE5_VALUE)	&& (enuUARTCharacterSize != UART_CHARACTER_SIZE_STATE6_VALUE)	&&
 444:	45 30       	cpi	r20, 0x05	; 5
 446:	09 f4       	brne	.+2      	; 0x44a <UART_Init+0x36>
 448:	79 c0       	rjmp	.+242    	; 0x53c <UART_Init+0x128>
 44a:	46 30       	cpi	r20, 0x06	; 6
 44c:	09 f4       	brne	.+2      	; 0x450 <UART_Init+0x3c>
 44e:	78 c0       	rjmp	.+240    	; 0x540 <UART_Init+0x12c>
		(enuUARTStopBitSelect > UART_STOP_BIT_SELECT_MIN_VALUE)								&& (enuUARTStopBitSelect < UART_STOP_BIT_SELECT_MAX_VALUE)		&&
 450:	31 e0       	ldi	r19, 0x01	; 1
 452:	3f 15       	cp	r19, r15
 454:	08 f4       	brcc	.+2      	; 0x458 <UART_Init+0x44>
 456:	76 c0       	rjmp	.+236    	; 0x544 <UART_Init+0x130>
		(enuUARTParityMode > UART_PARITY_MODE_MIN_VALUE)										&& (enuUARTParityMode < UART_PARITY_MODE_MAX_VALUE)				&& (enuUARTParityMode != UART_PARITY_MODE_STATE1_VALUE))
 458:	04 30       	cpi	r16, 0x04	; 4
 45a:	08 f0       	brcs	.+2      	; 0x45e <UART_Init+0x4a>
 45c:	75 c0       	rjmp	.+234    	; 0x548 <UART_Init+0x134>
 45e:	01 30       	cpi	r16, 0x01	; 1
 460:	09 f4       	brne	.+2      	; 0x464 <UART_Init+0x50>
 462:	74 c0       	rjmp	.+232    	; 0x54c <UART_Init+0x138>
	{
		/* Calculating the value loaded into the UBRR register according to the following formula: *
		 * Baudrate Register Value [UBRR] = (Oscillator Frequency [Fosc] / (16 * Baudrate)) - 1    */
		u16BaudrateValue = UART_BAUDRATE_REGISTER_VALUE(F_CPU, u32UARTBaudrate);
 464:	dc 01       	movw	r26, r24
 466:	cb 01       	movw	r24, r22
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	aa 1f       	adc	r26, r26
 46e:	bb 1f       	adc	r27, r27
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	aa 1f       	adc	r26, r26
 476:	bb 1f       	adc	r27, r27
 478:	9c 01       	movw	r18, r24
 47a:	ad 01       	movw	r20, r26
 47c:	22 0f       	add	r18, r18
 47e:	33 1f       	adc	r19, r19
 480:	44 1f       	adc	r20, r20
 482:	55 1f       	adc	r21, r21
 484:	22 0f       	add	r18, r18
 486:	33 1f       	adc	r19, r19
 488:	44 1f       	adc	r20, r20
 48a:	55 1f       	adc	r21, r21
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	72 e1       	ldi	r23, 0x12	; 18
 490:	8a e7       	ldi	r24, 0x7A	; 122
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 4a 03 	call	0x694	; 0x694 <__udivmodsi4>
 498:	21 50       	subi	r18, 0x01	; 1
 49a:	31 09       	sbc	r19, r1
 49c:	3a 83       	std	Y+2, r19	; 0x02
 49e:	29 83       	std	Y+1, r18	; 0x01
		/* Checking if Baudrate value is greater than 255 to access the 4 MSB of UBRRH register */
		if(u16BaudrateValue > UART_BAUDRATE_MSB_REGISTER_ACCESS_VALUE)
 4a0:	89 81       	ldd	r24, Y+1	; 0x01
 4a2:	9a 81       	ldd	r25, Y+2	; 0x02
 4a4:	8f 3f       	cpi	r24, 0xFF	; 255
 4a6:	91 05       	cpc	r25, r1
 4a8:	79 f0       	breq	.+30     	; 0x4c8 <UART_Init+0xb4>
 4aa:	70 f0       	brcs	.+28     	; 0x4c8 <UART_Init+0xb4>
		{
			/* Disabling the UCSRC register to have access on UBRRH register */
			CLEAR_BIT(UCSRC_R, UART_URSEL_BIT);
 4ac:	80 b5       	in	r24, 0x20	; 32
 4ae:	8f 77       	andi	r24, 0x7F	; 127
 4b0:	80 bd       	out	0x20, r24	; 32
			/* Enabling the UBRRH register to use it */
			SET_BIT(UBRRH_R, UART_URSEL_BIT);
 4b2:	80 b5       	in	r24, 0x20	; 32
 4b4:	80 68       	ori	r24, 0x80	; 128
 4b6:	80 bd       	out	0x20, r24	; 32
			/* Inserting the 4 MSBs into the UBRRH register */
			ASSIGN_BITS(UBRRH_R, UART_UBRRH_START_BIT, UART_UBRRH_VALUE(u16BaudrateValue), UART_UBRRH_MASK);
 4b8:	80 b5       	in	r24, 0x20	; 32
 4ba:	29 81       	ldd	r18, Y+1	; 0x01
 4bc:	3a 81       	ldd	r19, Y+2	; 0x02
 4be:	22 27       	eor	r18, r18
 4c0:	3f 70       	andi	r19, 0x0F	; 15
 4c2:	80 7f       	andi	r24, 0xF0	; 240
 4c4:	83 2b       	or	r24, r19
 4c6:	80 bd       	out	0x20, r24	; 32
		}
		else
		{
		}
		/* Inserting the rest of LSBs into the UBRRL register */
		ASSIGN_BITS(UBRRL_R, UART_UBRRL_START_BIT, UART_UBRRL_VALUE(u16BaudrateValue), UART_UBRRL_MASK);
 4c8:	89 b1       	in	r24, 0x09	; 9
 4ca:	89 81       	ldd	r24, Y+1	; 0x01
 4cc:	9a 81       	ldd	r25, Y+2	; 0x02
 4ce:	89 b9       	out	0x09, r24	; 9
		/* Enabling the UCSRC register to have access on it */
		SET_BIT(UCSRC_R, UART_URSEL_BIT);
 4d0:	80 b5       	in	r24, 0x20	; 32
 4d2:	80 68       	ori	r24, 0x80	; 128
 4d4:	80 bd       	out	0x20, r24	; 32
		/* Selecting whether the parity mode is disabled, even or odd parity */
		ASSIGN_BITS(UCSRC_R, UART_UPM_START_BIT, enuUARTParityMode, UART_UPM_MASK);
 4d6:	20 b5       	in	r18, 0x20	; 32
 4d8:	30 e1       	ldi	r19, 0x10	; 16
 4da:	03 9f       	mul	r16, r19
 4dc:	c0 01       	movw	r24, r0
 4de:	11 24       	eor	r1, r1
 4e0:	02 2f       	mov	r16, r18
 4e2:	0f 7c       	andi	r16, 0xCF	; 207
 4e4:	80 2b       	or	r24, r16
 4e6:	80 bd       	out	0x20, r24	; 32
		/* Selecting whether the stop bit is one bit or two bits */
		ASSIGN_BIT(UCSRC_R, UART_USBS_BIT,  enuUARTStopBitSelect);
 4e8:	20 b5       	in	r18, 0x20	; 32
 4ea:	8f 2d       	mov	r24, r15
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	92 2f       	mov	r25, r18
 4fc:	97 7f       	andi	r25, 0xF7	; 247
 4fe:	89 2b       	or	r24, r25
 500:	80 bd       	out	0x20, r24	; 32
		/* Selecting the character size (ranging from 5 bits to 9 bits) */
		ASSIGN_BITS(UCSRC_R, UART_UCSZ_START_BIT, UART_UCSZ_2LSB_VALUES(enuUARTCharacterSize), UART_UCSZ_MASK);
 502:	20 b5       	in	r18, 0x20	; 32
 504:	91 2f       	mov	r25, r17
 506:	93 70       	andi	r25, 0x03	; 3
 508:	89 2f       	mov	r24, r25
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	92 2f       	mov	r25, r18
 512:	99 7f       	andi	r25, 0xF9	; 249
 514:	89 2b       	or	r24, r25
 516:	80 bd       	out	0x20, r24	; 32
		ASSIGN_BIT(UCSRB_R, UART_UCSZ2_BIT, UART_UCSZ2_VALUE(enuUARTCharacterSize));
 518:	8a b1       	in	r24, 0x0a	; 10
 51a:	8b 7f       	andi	r24, 0xFB	; 251
 51c:	91 2f       	mov	r25, r17
 51e:	94 70       	andi	r25, 0x04	; 4
 520:	89 2b       	or	r24, r25
 522:	8a b9       	out	0x0a, r24	; 10
		enuUARTCharacterSizeState = enuUARTCharacterSize;
 524:	10 93 82 00 	sts	0x0082, r17	; 0x800082 <enuUARTCharacterSizeState>
		enuUARTGroupState = UART_INIT_DONE;		
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <enuUARTGroupState>
		enuRetVar = E_OK;			
 52e:	0f c0       	rjmp	.+30     	; 0x54e <UART_Init+0x13a>
	}
	else
	{
		enuRetVar = E_ERROR;
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	0d c0       	rjmp	.+26     	; 0x54e <UART_Init+0x13a>
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	0b c0       	rjmp	.+22     	; 0x54e <UART_Init+0x13a>
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	09 c0       	rjmp	.+18     	; 0x54e <UART_Init+0x13a>
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	07 c0       	rjmp	.+14     	; 0x54e <UART_Init+0x13a>
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	05 c0       	rjmp	.+10     	; 0x54e <UART_Init+0x13a>
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	03 c0       	rjmp	.+6      	; 0x54e <UART_Init+0x13a>
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	01 c0       	rjmp	.+2      	; 0x54e <UART_Init+0x13a>
 54c:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
 54e:	0f 90       	pop	r0
 550:	0f 90       	pop	r0
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	1f 91       	pop	r17
 558:	0f 91       	pop	r16
 55a:	ff 90       	pop	r15
 55c:	08 95       	ret

0000055e <UART_SendData>:
* Parameters	: u16Data
* Return Value	: enuErrorStatus_t
* Description  : Initiate a data transmission from UART module to external module
*************************************************************************************************/
enuErrorStatus_t UART_SendData(uint16_t u16Data)
{
 55e:	9c 01       	movw	r18, r24
	enuErrorStatus_t enuRetVar;
	
	if(enuUARTGroupState == UART_INIT_DONE)
 560:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <enuUARTGroupState>
 564:	91 30       	cpi	r25, 0x01	; 1
 566:	c1 f4       	brne	.+48     	; 0x598 <UART_SendData+0x3a>
	{
		/* Enabling the transmit enable to start transmission */
		SET_BIT(UCSRB_R, UART_TXEN_BIT);
 568:	8a b1       	in	r24, 0x0a	; 10
 56a:	88 60       	ori	r24, 0x08	; 8
 56c:	8a b9       	out	0x0a, r24	; 10
		/* Inserting the first byte data to be transmitted into the data register */
		UDR_R = (uint8_t)u16Data;
 56e:	2c b9       	out	0x0c, r18	; 12
		/* Checking if the the frame is of 9-bit long, to add the ninth bit into UCSRB register */
		if(enuUARTCharacterSizeState == UART_NINE_CHARACTER_BITS)
 570:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <enuUARTCharacterSizeState>
 574:	87 30       	cpi	r24, 0x07	; 7
 576:	31 f4       	brne	.+12     	; 0x584 <UART_SendData+0x26>
		{
			ASSIGN_BIT(UCSRB_R, UART_TXB8_BIT, UART_TXB8_VALUE(u16Data));
 578:	8a b1       	in	r24, 0x0a	; 10
 57a:	22 27       	eor	r18, r18
 57c:	31 70       	andi	r19, 0x01	; 1
 57e:	8e 7f       	andi	r24, 0xFE	; 254
 580:	83 2b       	or	r24, r19
 582:	8a b9       	out	0x0a, r24	; 10
		}
		else
		{
		}
		/* Waiting for the data until it has successfully been transmitted */
		while(IS_BIT_CLEAR(UCSRA_R, UART_TXC_BIT));
 584:	5e 9b       	sbis	0x0b, 6	; 11
 586:	fe cf       	rjmp	.-4      	; 0x584 <UART_SendData+0x26>
		/* Clearing transmission complete flag */
		SET_BIT(UCSRA_R, UART_TXC_BIT);
 588:	8b b1       	in	r24, 0x0b	; 11
 58a:	80 64       	ori	r24, 0x40	; 64
 58c:	8b b9       	out	0x0b, r24	; 11
		/* Disabling the transmit enable to stop transmission */
		CLEAR_BIT(UCSRB_R, UART_TXEN_BIT);	
 58e:	8a b1       	in	r24, 0x0a	; 10
 590:	87 7f       	andi	r24, 0xF7	; 247
 592:	8a b9       	out	0x0a, r24	; 10
		enuRetVar = E_OK;
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
 598:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
 59a:	08 95       	ret

0000059c <UART_ReceiveData>:
* Parameters	: *pu16Data
* Return Value	: enuErrorStatus_t
* Description  : Initiate a data reception on UART module from external module
*************************************************************************************************/
enuErrorStatus_t UART_ReceiveData(uint16_t* pu16Data)
{
 59c:	fc 01       	movw	r30, r24
	enuErrorStatus_t enuRetVar;
	
	if(enuUARTGroupState == UART_INIT_DONE)
 59e:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <enuUARTGroupState>
 5a2:	91 30       	cpi	r25, 0x01	; 1
 5a4:	01 f5       	brne	.+64     	; 0x5e6 <UART_ReceiveData+0x4a>
	{
		/* Enabling the receive enable to start reception */
		SET_BIT(UCSRB_R, UART_RXEN_BIT);
 5a6:	9a b1       	in	r25, 0x0a	; 10
 5a8:	90 61       	ori	r25, 0x10	; 16
 5aa:	9a b9       	out	0x0a, r25	; 10
		/* Waiting for the data until it has successfully been received */
		while(IS_BIT_CLEAR(UCSRA_R, UART_RXC_BIT));
 5ac:	5f 9b       	sbis	0x0b, 7	; 11
 5ae:	fe cf       	rjmp	.-4      	; 0x5ac <UART_ReceiveData+0x10>
		/* Clearing transmission complete flag */
		SET_BIT(UCSRA_R, UART_RXC_BIT);
 5b0:	9b b1       	in	r25, 0x0b	; 11
 5b2:	90 68       	ori	r25, 0x80	; 128
 5b4:	9b b9       	out	0x0b, r25	; 11
		/* Inserting the received data into the data variable */
		*pu16Data = UDR_R;
 5b6:	2c b1       	in	r18, 0x0c	; 12
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	31 83       	std	Z+1, r19	; 0x01
 5bc:	20 83       	st	Z, r18
		/* Checking if the the frame is of 9-bit long, fetch the ninth bit into the data array */
		if(enuUARTCharacterSizeState == UART_NINE_CHARACTER_BITS)
 5be:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <enuUARTCharacterSizeState>
 5c2:	87 30       	cpi	r24, 0x07	; 7
 5c4:	59 f4       	brne	.+22     	; 0x5dc <UART_ReceiveData+0x40>
		{
			ASSIGN_BIT(*pu16Data, UART_DATA_BIT_EIGHT, GET_BIT(UCSRB_R, UART_RXB8_BIT));
 5c6:	8a b1       	in	r24, 0x0a	; 10
 5c8:	82 70       	andi	r24, 0x02	; 2
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	95 95       	asr	r25
 5ce:	87 95       	ror	r24
 5d0:	40 e0       	ldi	r20, 0x00	; 0
 5d2:	58 2f       	mov	r21, r24
 5d4:	24 2b       	or	r18, r20
 5d6:	35 2b       	or	r19, r21
 5d8:	31 83       	std	Z+1, r19	; 0x01
 5da:	20 83       	st	Z, r18
		}
		else
		{
		}		
		/* Disabling the receive enable to stop reception */
		CLEAR_BIT(UCSRB_R, UART_RXEN_BIT);
 5dc:	8a b1       	in	r24, 0x0a	; 10
 5de:	8f 7e       	andi	r24, 0xEF	; 239
 5e0:	8a b9       	out	0x0a, r24	; 10
		enuRetVar = E_OK;
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
 5e6:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;	
}
 5e8:	08 95       	ret

000005ea <UART_SendString>:
* Parameters	: *pu16Data
* Return Value	: enuErrorStatus_t
* Description  : Initiate a data transmission from UART module to external module
*************************************************************************************************/
enuErrorStatus_t UART_SendString(uint8_t* pu8String)
{
 5ea:	ac 01       	movw	r20, r24
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex = 0;
	uint8_t u8Flag = LOW;
	
	if(enuUARTGroupState == UART_INIT_DONE)
 5ec:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <enuUARTGroupState>
 5f0:	81 30       	cpi	r24, 0x01	; 1
 5f2:	41 f5       	brne	.+80     	; 0x644 <UART_SendString+0x5a>
	{
		/* Enabling the transmit enable to start transmission */
		SET_BIT(UCSRB_R, UART_TXEN_BIT);
 5f4:	8a b1       	in	r24, 0x0a	; 10
 5f6:	88 60       	ori	r24, 0x08	; 8
 5f8:	8a b9       	out	0x0a, r24	; 10
*************************************************************************************************/
enuErrorStatus_t UART_SendString(uint8_t* pu8String)
{
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex = 0;
	uint8_t u8Flag = LOW;
 5fa:	30 e0       	ldi	r19, 0x00	; 0
* Description  : Initiate a data transmission from UART module to external module
*************************************************************************************************/
enuErrorStatus_t UART_SendString(uint8_t* pu8String)
{
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex = 0;
 5fc:	90 e0       	ldi	r25, 0x00	; 0
		/* Enabling the transmit enable to start transmission */
		SET_BIT(UCSRB_R, UART_TXEN_BIT);
		do
		{
			/* Inserting the data to be transmitted into the data register */
			UDR_R = *(pu8String + u8LoopIndex);
 5fe:	fa 01       	movw	r30, r20
 600:	e9 0f       	add	r30, r25
 602:	f1 1d       	adc	r31, r1
 604:	80 81       	ld	r24, Z
 606:	8c b9       	out	0x0c, r24	; 12
			/* Waiting for the data until it has successfully been transmitted */
			while(IS_BIT_CLEAR(UCSRA_R, UART_TXC_BIT));
 608:	5e 9b       	sbis	0x0b, 6	; 11
 60a:	fe cf       	rjmp	.-4      	; 0x608 <UART_SendString+0x1e>
			/* Clearing transmission complete flag */
			SET_BIT(UCSRA_R, UART_TXC_BIT);
 60c:	2b b1       	in	r18, 0x0b	; 11
 60e:	20 64       	ori	r18, 0x40	; 64
 610:	2b b9       	out	0x0b, r18	; 11
			/* Incrementing the index of the input string */
			u8LoopIndex++;
 612:	9f 5f       	subi	r25, 0xFF	; 255
			/* Checking if the next element in the input string is \n or \r */
			if((*(pu8String + u8LoopIndex) == '\n') || (*(pu8String + u8LoopIndex) == '\r') || (u8LoopIndex == UART_MAX_STRING_SIZE))
 614:	fa 01       	movw	r30, r20
 616:	e9 0f       	add	r30, r25
 618:	f1 1d       	adc	r31, r1
 61a:	20 81       	ld	r18, Z
 61c:	2a 30       	cpi	r18, 0x0A	; 10
 61e:	21 f0       	breq	.+8      	; 0x628 <UART_SendString+0x3e>
 620:	2d 30       	cpi	r18, 0x0D	; 13
 622:	11 f0       	breq	.+4      	; 0x628 <UART_SendString+0x3e>
 624:	9f 3f       	cpi	r25, 0xFF	; 255
 626:	39 f4       	brne	.+14     	; 0x636 <UART_SendString+0x4c>
			{
				/* Inserting the data to be transmitted into the data register */
				UDR_R = *(pu8String + u8LoopIndex);
 628:	2c b9       	out	0x0c, r18	; 12
				/* Waiting for the data until it has successfully been transmitted */
				while(IS_BIT_CLEAR(UCSRA_R, UART_TXC_BIT));
 62a:	5e 9b       	sbis	0x0b, 6	; 11
 62c:	fe cf       	rjmp	.-4      	; 0x62a <UART_SendString+0x40>
				/* Clearing transmission complete flag */
				SET_BIT(UCSRA_R, UART_TXC_BIT);
 62e:	2b b1       	in	r18, 0x0b	; 11
 630:	20 64       	ori	r18, 0x40	; 64
 632:	2b b9       	out	0x0b, r18	; 11
				/* Raising the flag to break the loop */
				u8Flag = HIGH;
 634:	31 e0       	ldi	r19, 0x01	; 1
			}
			else
			{
			}
		} while(u8Flag == LOW);
 636:	33 23       	and	r19, r19
 638:	11 f3       	breq	.-60     	; 0x5fe <UART_SendString+0x14>
		/* Disabling the transmit enable to stop transmission */
		CLEAR_BIT(UCSRB_R, UART_TXEN_BIT);
 63a:	8a b1       	in	r24, 0x0a	; 10
 63c:	87 7f       	andi	r24, 0xF7	; 247
 63e:	8a b9       	out	0x0a, r24	; 10
		enuRetVar = E_OK;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
 644:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
 646:	08 95       	ret

00000648 <UART_ReceiveString>:
* Parameters	: *pu16Data - u8BufferMaxSize
* Return Value	: enuErrorStatus_t
* Description  : Initiate a data reception on UART module from external module
*************************************************************************************************/
enuErrorStatus_t UART_ReceiveString(uint8_t* pu8String)
{
 648:	ac 01       	movw	r20, r24
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex = 0;
	uint8_t u8Flag = LOW;
			
	if(enuUARTGroupState == UART_INIT_DONE)
 64a:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <enuUARTGroupState>
 64e:	81 30       	cpi	r24, 0x01	; 1
 650:	f9 f4       	brne	.+62     	; 0x690 <UART_ReceiveString+0x48>
	{
		/* Enabling the receive enable to start reception */
		SET_BIT(UCSRB_R, UART_RXEN_BIT);
 652:	8a b1       	in	r24, 0x0a	; 10
 654:	80 61       	ori	r24, 0x10	; 16
 656:	8a b9       	out	0x0a, r24	; 10
*************************************************************************************************/
enuErrorStatus_t UART_ReceiveString(uint8_t* pu8String)
{
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex = 0;
	uint8_t u8Flag = LOW;
 658:	30 e0       	ldi	r19, 0x00	; 0
* Description  : Initiate a data reception on UART module from external module
*************************************************************************************************/
enuErrorStatus_t UART_ReceiveString(uint8_t* pu8String)
{
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex = 0;
 65a:	20 e0       	ldi	r18, 0x00	; 0
		/* Enabling the receive enable to start reception */
		SET_BIT(UCSRB_R, UART_RXEN_BIT);
		do 
		{
			/* Waiting for the data until it has successfully been received */
			while(IS_BIT_CLEAR(UCSRA_R, UART_RXC_BIT));
 65c:	5f 9b       	sbis	0x0b, 7	; 11
 65e:	fe cf       	rjmp	.-4      	; 0x65c <UART_ReceiveString+0x14>
			/* Clearing reception complete flag */
			SET_BIT(UCSRA_R, UART_RXC_BIT);
 660:	9b b1       	in	r25, 0x0b	; 11
 662:	90 68       	ori	r25, 0x80	; 128
 664:	9b b9       	out	0x0b, r25	; 11
			/* Adding the value of the received data from the UART data register into the data variable */
			*(pu8String + u8LoopIndex) = UDR_R;
 666:	9c b1       	in	r25, 0x0c	; 12
 668:	fa 01       	movw	r30, r20
 66a:	e2 0f       	add	r30, r18
 66c:	f1 1d       	adc	r31, r1
 66e:	90 83       	st	Z, r25
			/* Checking if the value of the last received data is not \n or \r */
			if((*(pu8String + u8LoopIndex) != '\n') && (*(pu8String + u8LoopIndex) != '\r'))
 670:	9a 30       	cpi	r25, 0x0A	; 10
 672:	21 f0       	breq	.+8      	; 0x67c <UART_ReceiveString+0x34>
 674:	9d 30       	cpi	r25, 0x0D	; 13
 676:	21 f0       	breq	.+8      	; 0x680 <UART_ReceiveString+0x38>
			{
				/* Incrementing the index of the array */
				u8LoopIndex++;
 678:	2f 5f       	subi	r18, 0xFF	; 255
 67a:	03 c0       	rjmp	.+6      	; 0x682 <UART_ReceiveString+0x3a>
			}
			else
			{
				/* Raising the flag to break the loop */
				u8Flag = HIGH;
 67c:	31 e0       	ldi	r19, 0x01	; 1
 67e:	01 c0       	rjmp	.+2      	; 0x682 <UART_ReceiveString+0x3a>
 680:	31 e0       	ldi	r19, 0x01	; 1
			}
		} while(u8Flag == LOW);
 682:	33 23       	and	r19, r19
 684:	59 f3       	breq	.-42     	; 0x65c <UART_ReceiveString+0x14>
		/* Disabling the receive enable to stop reception */
		CLEAR_BIT(UCSRB_R, UART_RXEN_BIT);
 686:	8a b1       	in	r24, 0x0a	; 10
 688:	8f 7e       	andi	r24, 0xEF	; 239
 68a:	8a b9       	out	0x0a, r24	; 10
		enuRetVar = E_OK;
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
 690:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
 692:	08 95       	ret

00000694 <__udivmodsi4>:
 694:	a1 e2       	ldi	r26, 0x21	; 33
 696:	1a 2e       	mov	r1, r26
 698:	aa 1b       	sub	r26, r26
 69a:	bb 1b       	sub	r27, r27
 69c:	fd 01       	movw	r30, r26
 69e:	0d c0       	rjmp	.+26     	; 0x6ba <__udivmodsi4_ep>

000006a0 <__udivmodsi4_loop>:
 6a0:	aa 1f       	adc	r26, r26
 6a2:	bb 1f       	adc	r27, r27
 6a4:	ee 1f       	adc	r30, r30
 6a6:	ff 1f       	adc	r31, r31
 6a8:	a2 17       	cp	r26, r18
 6aa:	b3 07       	cpc	r27, r19
 6ac:	e4 07       	cpc	r30, r20
 6ae:	f5 07       	cpc	r31, r21
 6b0:	20 f0       	brcs	.+8      	; 0x6ba <__udivmodsi4_ep>
 6b2:	a2 1b       	sub	r26, r18
 6b4:	b3 0b       	sbc	r27, r19
 6b6:	e4 0b       	sbc	r30, r20
 6b8:	f5 0b       	sbc	r31, r21

000006ba <__udivmodsi4_ep>:
 6ba:	66 1f       	adc	r22, r22
 6bc:	77 1f       	adc	r23, r23
 6be:	88 1f       	adc	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	1a 94       	dec	r1
 6c4:	69 f7       	brne	.-38     	; 0x6a0 <__udivmodsi4_loop>
 6c6:	60 95       	com	r22
 6c8:	70 95       	com	r23
 6ca:	80 95       	com	r24
 6cc:	90 95       	com	r25
 6ce:	9b 01       	movw	r18, r22
 6d0:	ac 01       	movw	r20, r24
 6d2:	bd 01       	movw	r22, r26
 6d4:	cf 01       	movw	r24, r30
 6d6:	08 95       	ret

000006d8 <atoi>:
 6d8:	fc 01       	movw	r30, r24
 6da:	88 27       	eor	r24, r24
 6dc:	99 27       	eor	r25, r25
 6de:	e8 94       	clt
 6e0:	21 91       	ld	r18, Z+
 6e2:	20 32       	cpi	r18, 0x20	; 32
 6e4:	e9 f3       	breq	.-6      	; 0x6e0 <atoi+0x8>
 6e6:	29 30       	cpi	r18, 0x09	; 9
 6e8:	10 f0       	brcs	.+4      	; 0x6ee <atoi+0x16>
 6ea:	2e 30       	cpi	r18, 0x0E	; 14
 6ec:	c8 f3       	brcs	.-14     	; 0x6e0 <atoi+0x8>
 6ee:	2b 32       	cpi	r18, 0x2B	; 43
 6f0:	41 f0       	breq	.+16     	; 0x702 <atoi+0x2a>
 6f2:	2d 32       	cpi	r18, 0x2D	; 45
 6f4:	39 f4       	brne	.+14     	; 0x704 <atoi+0x2c>
 6f6:	68 94       	set
 6f8:	04 c0       	rjmp	.+8      	; 0x702 <atoi+0x2a>
 6fa:	0e 94 8a 03 	call	0x714	; 0x714 <__mulhi_const_10>
 6fe:	82 0f       	add	r24, r18
 700:	91 1d       	adc	r25, r1
 702:	21 91       	ld	r18, Z+
 704:	20 53       	subi	r18, 0x30	; 48
 706:	2a 30       	cpi	r18, 0x0A	; 10
 708:	c0 f3       	brcs	.-16     	; 0x6fa <atoi+0x22>
 70a:	1e f4       	brtc	.+6      	; 0x712 <atoi+0x3a>
 70c:	90 95       	com	r25
 70e:	81 95       	neg	r24
 710:	9f 4f       	sbci	r25, 0xFF	; 255
 712:	08 95       	ret

00000714 <__mulhi_const_10>:
 714:	7a e0       	ldi	r23, 0x0A	; 10
 716:	97 9f       	mul	r25, r23
 718:	90 2d       	mov	r25, r0
 71a:	87 9f       	mul	r24, r23
 71c:	80 2d       	mov	r24, r0
 71e:	91 0d       	add	r25, r1
 720:	11 24       	eor	r1, r1
 722:	08 95       	ret

00000724 <_exit>:
 724:	f8 94       	cli

00000726 <__stop_program>:
 726:	ff cf       	rjmp	.-2      	; 0x726 <__stop_program>
