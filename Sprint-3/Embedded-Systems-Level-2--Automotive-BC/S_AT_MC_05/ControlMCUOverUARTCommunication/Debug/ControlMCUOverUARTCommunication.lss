
ControlMCUOverUARTCommunication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000534  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00000534  000005c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000220  0080009a  0080009a  00000602  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000602  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000161e  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000862  00000000  00000000  00001da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000882  00000000  00000000  00002608  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00002e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f5  00000000  00000000  00003074  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000097e  00000000  00000000  00003969  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000042e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 39       	cpi	r26, 0x9A	; 154
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	aa e9       	ldi	r26, 0x9A	; 154
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3b       	cpi	r26, 0xBA	; 186
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 78 01 	call	0x2f0	; 0x2f0 <main>
  8a:	0c 94 98 02 	jmp	0x530	; 0x530 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <App_Init>:
#include "App.h"


void App_Init(void)
{
  92:	0f 93       	push	r16
	UART_Init(9600, UART_EIGHT_CHARACTER_BITS, UART_ONE_STOP_BIT, UART_DISABLE_PARITY);
  94:	00 e0       	ldi	r16, 0x00	; 0
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	43 e0       	ldi	r20, 0x03	; 3
  9a:	60 e8       	ldi	r22, 0x80	; 128
  9c:	75 e2       	ldi	r23, 0x25	; 37
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <UART_Init>
	LED_Init(PA0, LED_ACTIVE_HIGH);
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	0e 94 33 01 	call	0x266	; 0x266 <LED_Init>
	LED_Init(PA1, LED_ACTIVE_HIGH);
  ae:	61 e0       	ldi	r22, 0x01	; 1
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0e 94 33 01 	call	0x266	; 0x266 <LED_Init>
	LED_Init(PA2, LED_ACTIVE_HIGH);
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	0e 94 33 01 	call	0x266	; 0x266 <LED_Init>
}
  be:	0f 91       	pop	r16
  c0:	08 95       	ret

000000c2 <App_Update>:

void App_Update(void)
{
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	00 d0       	rcall	.+0      	; 0xc8 <App_Update+0x6>
  c8:	00 d0       	rcall	.+0      	; 0xca <App_Update+0x8>
  ca:	00 d0       	rcall	.+0      	; 0xcc <App_Update+0xa>
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8Command[6];
	
	UART_ReceiveString(u8Command);
  d0:	ce 01       	movw	r24, r28
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	0e 94 50 02 	call	0x4a0	; 0x4a0 <UART_ReceiveString>
	if((u8Command[0] == 'S') && (u8Command[1] == 'T') && (u8Command[2] == 'A') && (u8Command[3] == 'R') && (u8Command[4] == 'T'))
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	83 35       	cpi	r24, 0x53	; 83
  dc:	d1 f4       	brne	.+52     	; 0x112 <App_Update+0x50>
  de:	9a 81       	ldd	r25, Y+2	; 0x02
  e0:	94 35       	cpi	r25, 0x54	; 84
  e2:	b9 f4       	brne	.+46     	; 0x112 <App_Update+0x50>
  e4:	9b 81       	ldd	r25, Y+3	; 0x03
  e6:	91 34       	cpi	r25, 0x41	; 65
  e8:	a1 f4       	brne	.+40     	; 0x112 <App_Update+0x50>
  ea:	9c 81       	ldd	r25, Y+4	; 0x04
  ec:	92 35       	cpi	r25, 0x52	; 82
  ee:	89 f4       	brne	.+34     	; 0x112 <App_Update+0x50>
  f0:	9d 81       	ldd	r25, Y+5	; 0x05
  f2:	94 35       	cpi	r25, 0x54	; 84
  f4:	71 f4       	brne	.+28     	; 0x112 <App_Update+0x50>
	{
		LED_Off(PA0);
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 65 01 	call	0x2ca	; 0x2ca <LED_Off>
		LED_Off(PA1);
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 65 01 	call	0x2ca	; 0x2ca <LED_Off>
		LED_On(PA2);
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LED_On>
		UART_SendString((uint8_t*)"Green LED is on\n");		
 108:	80 e6       	ldi	r24, 0x60	; 96
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 22 02 	call	0x444	; 0x444 <UART_SendString>
 110:	3b c0       	rjmp	.+118    	; 0x188 <App_Update+0xc6>
	}
	else if((u8Command[0] == 'W') && (u8Command[1] == 'A') && (u8Command[2] == 'I') && (u8Command[3] == 'T'))
 112:	87 35       	cpi	r24, 0x57	; 87
 114:	b9 f4       	brne	.+46     	; 0x144 <App_Update+0x82>
 116:	9a 81       	ldd	r25, Y+2	; 0x02
 118:	91 34       	cpi	r25, 0x41	; 65
 11a:	a1 f4       	brne	.+40     	; 0x144 <App_Update+0x82>
 11c:	9b 81       	ldd	r25, Y+3	; 0x03
 11e:	99 34       	cpi	r25, 0x49	; 73
 120:	89 f4       	brne	.+34     	; 0x144 <App_Update+0x82>
 122:	9c 81       	ldd	r25, Y+4	; 0x04
 124:	94 35       	cpi	r25, 0x54	; 84
 126:	71 f4       	brne	.+28     	; 0x144 <App_Update+0x82>
	{
		LED_Off(PA0);
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 65 01 	call	0x2ca	; 0x2ca <LED_Off>
		LED_On(PA1);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LED_On>
		LED_Off(PA2);	
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	0e 94 65 01 	call	0x2ca	; 0x2ca <LED_Off>
		UART_SendString((uint8_t*)"Yellow LED is on\n");			
 13a:	81 e7       	ldi	r24, 0x71	; 113
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 22 02 	call	0x444	; 0x444 <UART_SendString>
 142:	22 c0       	rjmp	.+68     	; 0x188 <App_Update+0xc6>
	}
	else if((u8Command[0] == 'S') && (u8Command[1] == 'T') && (u8Command[2] == 'O') && (u8Command[3] == 'P'))
 144:	83 35       	cpi	r24, 0x53	; 83
 146:	b9 f4       	brne	.+46     	; 0x176 <App_Update+0xb4>
 148:	9a 81       	ldd	r25, Y+2	; 0x02
 14a:	94 35       	cpi	r25, 0x54	; 84
 14c:	a1 f4       	brne	.+40     	; 0x176 <App_Update+0xb4>
 14e:	9b 81       	ldd	r25, Y+3	; 0x03
 150:	9f 34       	cpi	r25, 0x4F	; 79
 152:	89 f4       	brne	.+34     	; 0x176 <App_Update+0xb4>
 154:	9c 81       	ldd	r25, Y+4	; 0x04
 156:	90 35       	cpi	r25, 0x50	; 80
 158:	71 f4       	brne	.+28     	; 0x176 <App_Update+0xb4>
	{
		LED_On(PA0);
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LED_On>
		LED_Off(PA1);
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 65 01 	call	0x2ca	; 0x2ca <LED_Off>
		LED_Off(PA2);
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	0e 94 65 01 	call	0x2ca	; 0x2ca <LED_Off>
		UART_SendString((uint8_t*)"Red LED is on\n");
 16c:	83 e8       	ldi	r24, 0x83	; 131
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 22 02 	call	0x444	; 0x444 <UART_SendString>
 174:	09 c0       	rjmp	.+18     	; 0x188 <App_Update+0xc6>
	}	
	else if((u8Command[0] == 'A') && (u8Command[1] == 'T'))
 176:	81 34       	cpi	r24, 0x41	; 65
 178:	39 f4       	brne	.+14     	; 0x188 <App_Update+0xc6>
 17a:	8a 81       	ldd	r24, Y+2	; 0x02
 17c:	84 35       	cpi	r24, 0x54	; 84
 17e:	21 f4       	brne	.+8      	; 0x188 <App_Update+0xc6>
	{
		UART_SendString((uint8_t*)"OK\n");
 180:	82 e9       	ldi	r24, 0x92	; 146
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 22 02 	call	0x444	; 0x444 <UART_SendString>
	}
	else
	{
	}
}
 188:	26 96       	adiw	r28, 0x06	; 6
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	f8 94       	cli
 18e:	de bf       	out	0x3e, r29	; 62
 190:	0f be       	out	0x3f, r0	; 63
 192:	cd bf       	out	0x3d, r28	; 61
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <DIO_PinInit>:
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;
}
 19a:	80 32       	cpi	r24, 0x20	; 32
 19c:	b0 f5       	brcc	.+108    	; 0x20a <DIO_PinInit+0x70>
 19e:	62 30       	cpi	r22, 0x02	; 2
 1a0:	b0 f5       	brcc	.+108    	; 0x20e <DIO_PinInit+0x74>
 1a2:	42 30       	cpi	r20, 0x02	; 2
 1a4:	b0 f5       	brcc	.+108    	; 0x212 <DIO_PinInit+0x78>
 1a6:	e8 2f       	mov	r30, r24
 1a8:	e6 95       	lsr	r30
 1aa:	e6 95       	lsr	r30
 1ac:	e6 95       	lsr	r30
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	ea 56       	subi	r30, 0x6A	; 106
 1b2:	ff 4f       	sbci	r31, 0xFF	; 255
 1b4:	e0 81       	ld	r30, Z
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	df 01       	movw	r26, r30
 1ba:	5e 91       	ld	r21, -X
 1bc:	98 2f       	mov	r25, r24
 1be:	97 70       	andi	r25, 0x07	; 7
 1c0:	21 e0       	ldi	r18, 0x01	; 1
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	09 2e       	mov	r0, r25
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_PinInit+0x32>
 1c8:	22 0f       	add	r18, r18
 1ca:	33 1f       	adc	r19, r19
 1cc:	0a 94       	dec	r0
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_PinInit+0x2e>
 1d0:	20 95       	com	r18
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	09 2e       	mov	r0, r25
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_PinInit+0x42>
 1d8:	66 0f       	add	r22, r22
 1da:	77 1f       	adc	r23, r23
 1dc:	0a 94       	dec	r0
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_PinInit+0x3e>
 1e0:	35 2f       	mov	r19, r21
 1e2:	32 23       	and	r19, r18
 1e4:	63 2b       	or	r22, r19
 1e6:	6c 93       	st	X, r22
 1e8:	30 81       	ld	r19, Z
 1ea:	50 e0       	ldi	r21, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_PinInit+0x58>
 1ee:	44 0f       	add	r20, r20
 1f0:	55 1f       	adc	r21, r21
 1f2:	9a 95       	dec	r25
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_PinInit+0x54>
 1f6:	23 23       	and	r18, r19
 1f8:	42 2b       	or	r20, r18
 1fa:	40 83       	st	Z, r20
 1fc:	e8 2f       	mov	r30, r24
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	e6 56       	subi	r30, 0x66	; 102
 202:	ff 4f       	sbci	r31, 0xFF	; 255
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	80 83       	st	Z, r24
 208:	08 95       	ret
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	08 95       	ret
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	08 95       	ret
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	08 95       	ret

00000216 <DIO_PinWrite>:
*************************************************************************************************/
enuErrorStatus_t DIO_PinWrite(enuDIOPinNo_t enuDIOPinNo, uint8_t u8PinData)
{
	enuErrorStatus_t enuRetVar;
	
	if(aenuDIOPinState[enuDIOPinNo] == DIO_INIT_DONE)
 216:	e8 2f       	mov	r30, r24
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	e6 56       	subi	r30, 0x66	; 102
 21c:	ff 4f       	sbci	r31, 0xFF	; 255
 21e:	90 81       	ld	r25, Z
 220:	91 30       	cpi	r25, 0x01	; 1
 222:	f9 f4       	brne	.+62     	; 0x262 <DIO_PinWrite+0x4c>
	{
		/* Writing the value into the corresponding pin */
		ASSIGN_BIT(PORTx_R(DIO_PORT_NO(enuDIOPinNo)), DIO_PIN_NO(enuDIOPinNo), u8PinData);
 224:	e8 2f       	mov	r30, r24
 226:	e6 95       	lsr	r30
 228:	e6 95       	lsr	r30
 22a:	e6 95       	lsr	r30
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	ea 56       	subi	r30, 0x6A	; 106
 230:	ff 4f       	sbci	r31, 0xFF	; 255
 232:	e0 81       	ld	r30, Z
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	90 81       	ld	r25, Z
 238:	87 70       	andi	r24, 0x07	; 7
 23a:	21 e0       	ldi	r18, 0x01	; 1
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	08 2e       	mov	r0, r24
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_PinWrite+0x30>
 242:	22 0f       	add	r18, r18
 244:	33 1f       	adc	r19, r19
 246:	0a 94       	dec	r0
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_PinWrite+0x2c>
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_PinWrite+0x3c>
 24e:	66 0f       	add	r22, r22
 250:	77 1f       	adc	r23, r23
 252:	8a 95       	dec	r24
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_PinWrite+0x38>
 256:	20 95       	com	r18
 258:	29 23       	and	r18, r25
 25a:	62 2b       	or	r22, r18
 25c:	60 83       	st	Z, r22
		enuRetVar = E_OK;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
 262:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;	
}
 264:	08 95       	ret

00000266 <LED_Init>:
* Parameters	: enuDIOPinNo, enuLEDConnectionType
* Return Value	: enuErrorStatus_t
* Description  : Initialize one LED according to the configuration
*************************************************************************************************/
enuErrorStatus_t LED_Init(enuDIOPinNo_t enuDIOPinNo, enuLEDConnectionType_t enuLEDConnectionType)
{
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
   enuErrorStatus_t enuRetVar;
	
	if((enuLEDConnectionType == LED_ACTIVE_LOW) || (enuLEDConnectionType == LED_ACTIVE_HIGH))
 26a:	62 30       	cpi	r22, 0x02	; 2
 26c:	c0 f4       	brcc	.+48     	; 0x29e <LED_Init+0x38>
 26e:	d6 2f       	mov	r29, r22
 270:	c8 2f       	mov	r28, r24
	{
		/* Initializing the LED as output */
		DIO_PinInit(enuDIOPinNo, OUTPUT, NO_CONNECTION);
 272:	40 e0       	ldi	r20, 0x00	; 0
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_PinInit>
		/* Turning off the LED before using it */
		DIO_PinWrite(enuDIOPinNo, ~enuLEDConnectionType);
 27a:	6d 2f       	mov	r22, r29
 27c:	60 95       	com	r22
 27e:	8c 2f       	mov	r24, r28
 280:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_PinWrite>
		enuLEDConnectionTypeState[enuDIOPinNo] = enuLEDConnectionType;
 284:	8c 2f       	mov	r24, r28
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	fc 01       	movw	r30, r24
 28a:	e6 54       	subi	r30, 0x46	; 70
 28c:	ff 4f       	sbci	r31, 0xFF	; 255
 28e:	d0 83       	st	Z, r29
	   enuLEDState[enuDIOPinNo] = LED_INIT_DONE;
 290:	fc 01       	movw	r30, r24
 292:	e7 54       	subi	r30, 0x47	; 71
 294:	fe 4f       	sbci	r31, 0xFE	; 254
 296:	21 e0       	ldi	r18, 0x01	; 1
 298:	20 83       	st	Z, r18
		enuRetVar = E_OK;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	01 c0       	rjmp	.+2      	; 0x2a0 <LED_Init+0x3a>
   }
	else
	{
		enuRetVar = E_ERROR;
 29e:	80 e0       	ldi	r24, 0x00	; 0
	}
   return enuRetVar;
}
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <LED_On>:
*************************************************************************************************/
enuErrorStatus_t LED_On(enuDIOPinNo_t enuDIOPinNo)
{
   enuErrorStatus_t enuRetVar;
    
   if(enuLEDState[enuDIOPinNo] == LED_INIT_DONE)
 2a6:	28 2f       	mov	r18, r24
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	f9 01       	movw	r30, r18
 2ac:	e7 54       	subi	r30, 0x47	; 71
 2ae:	fe 4f       	sbci	r31, 0xFE	; 254
 2b0:	90 81       	ld	r25, Z
 2b2:	91 30       	cpi	r25, 0x01	; 1
 2b4:	41 f4       	brne	.+16     	; 0x2c6 <LED_On+0x20>
   {
	   /* Turning on the required LED */
	   DIO_PinWrite(enuDIOPinNo, enuLEDConnectionTypeState[enuDIOPinNo]);
 2b6:	f9 01       	movw	r30, r18
 2b8:	e6 54       	subi	r30, 0x46	; 70
 2ba:	ff 4f       	sbci	r31, 0xFF	; 255
 2bc:	60 81       	ld	r22, Z
 2be:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_PinWrite>
	   enuRetVar = E_OK;
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	08 95       	ret
   }
   else
   {
	   enuRetVar = E_ERROR;
 2c6:	80 e0       	ldi	r24, 0x00	; 0
   }
   return enuRetVar;	
}
 2c8:	08 95       	ret

000002ca <LED_Off>:
*************************************************************************************************/
enuErrorStatus_t LED_Off(enuDIOPinNo_t enuDIOPinNo)
{
   enuErrorStatus_t enuRetVar;
   
   if(enuLEDState[enuDIOPinNo] == LED_INIT_DONE)
 2ca:	28 2f       	mov	r18, r24
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	f9 01       	movw	r30, r18
 2d0:	e7 54       	subi	r30, 0x47	; 71
 2d2:	fe 4f       	sbci	r31, 0xFE	; 254
 2d4:	90 81       	ld	r25, Z
 2d6:	91 30       	cpi	r25, 0x01	; 1
 2d8:	49 f4       	brne	.+18     	; 0x2ec <LED_Off+0x22>
   {
	   /* Turning off the required LED */
	   DIO_PinWrite(enuDIOPinNo, ~enuLEDConnectionTypeState[enuDIOPinNo]);
 2da:	f9 01       	movw	r30, r18
 2dc:	e6 54       	subi	r30, 0x46	; 70
 2de:	ff 4f       	sbci	r31, 0xFF	; 255
 2e0:	60 81       	ld	r22, Z
 2e2:	60 95       	com	r22
 2e4:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_PinWrite>
	   enuRetVar = E_OK;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	08 95       	ret
   }
   else
   {
	   enuRetVar = E_ERROR;
 2ec:	80 e0       	ldi	r24, 0x00	; 0
   }
   return enuRetVar;	
}
 2ee:	08 95       	ret

000002f0 <main>:
#include "App.h"


int main(void)
{
    App_Init();
 2f0:	0e 94 49 00 	call	0x92	; 0x92 <App_Init>
    while (1) 
    {
		 App_Update();
 2f4:	0e 94 61 00 	call	0xc2	; 0xc2 <App_Update>
 2f8:	fd cf       	rjmp	.-6      	; 0x2f4 <main+0x4>

000002fa <UART_Init>:
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;	
}
 2fa:	ff 92       	push	r15
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	00 d0       	rcall	.+0      	; 0x306 <UART_Init+0xc>
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
 30a:	14 2f       	mov	r17, r20
 30c:	f2 2e       	mov	r15, r18
 30e:	61 34       	cpi	r22, 0x41	; 65
 310:	22 e4       	ldi	r18, 0x42	; 66
 312:	72 07       	cpc	r23, r18
 314:	2f e0       	ldi	r18, 0x0F	; 15
 316:	82 07       	cpc	r24, r18
 318:	91 05       	cpc	r25, r1
 31a:	08 f0       	brcs	.+2      	; 0x31e <UART_Init+0x24>
 31c:	7c c0       	rjmp	.+248    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 31e:	48 30       	cpi	r20, 0x08	; 8
 320:	08 f0       	brcs	.+2      	; 0x324 <UART_Init+0x2a>
 322:	7b c0       	rjmp	.+246    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 324:	44 30       	cpi	r20, 0x04	; 4
 326:	09 f4       	brne	.+2      	; 0x32a <UART_Init+0x30>
 328:	7a c0       	rjmp	.+244    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 32a:	45 30       	cpi	r20, 0x05	; 5
 32c:	09 f4       	brne	.+2      	; 0x330 <UART_Init+0x36>
 32e:	79 c0       	rjmp	.+242    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 330:	46 30       	cpi	r20, 0x06	; 6
 332:	09 f4       	brne	.+2      	; 0x336 <UART_Init+0x3c>
 334:	78 c0       	rjmp	.+240    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 336:	31 e0       	ldi	r19, 0x01	; 1
 338:	3f 15       	cp	r19, r15
 33a:	08 f4       	brcc	.+2      	; 0x33e <UART_Init+0x44>
 33c:	76 c0       	rjmp	.+236    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 33e:	04 30       	cpi	r16, 0x04	; 4
 340:	08 f0       	brcs	.+2      	; 0x344 <UART_Init+0x4a>
 342:	75 c0       	rjmp	.+234    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 344:	01 30       	cpi	r16, 0x01	; 1
 346:	09 f4       	brne	.+2      	; 0x34a <UART_Init+0x50>
 348:	74 c0       	rjmp	.+232    	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 34a:	dc 01       	movw	r26, r24
 34c:	cb 01       	movw	r24, r22
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	aa 1f       	adc	r26, r26
 354:	bb 1f       	adc	r27, r27
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	aa 1f       	adc	r26, r26
 35c:	bb 1f       	adc	r27, r27
 35e:	9c 01       	movw	r18, r24
 360:	ad 01       	movw	r20, r26
 362:	22 0f       	add	r18, r18
 364:	33 1f       	adc	r19, r19
 366:	44 1f       	adc	r20, r20
 368:	55 1f       	adc	r21, r21
 36a:	22 0f       	add	r18, r18
 36c:	33 1f       	adc	r19, r19
 36e:	44 1f       	adc	r20, r20
 370:	55 1f       	adc	r21, r21
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	72 e1       	ldi	r23, 0x12	; 18
 376:	8a e7       	ldi	r24, 0x7A	; 122
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 76 02 	call	0x4ec	; 0x4ec <__udivmodsi4>
 37e:	21 50       	subi	r18, 0x01	; 1
 380:	31 09       	sbc	r19, r1
 382:	3a 83       	std	Y+2, r19	; 0x02
 384:	29 83       	std	Y+1, r18	; 0x01
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	9a 81       	ldd	r25, Y+2	; 0x02
 38a:	8f 3f       	cpi	r24, 0xFF	; 255
 38c:	91 05       	cpc	r25, r1
 38e:	79 f0       	breq	.+30     	; 0x3ae <UART_Init+0xb4>
 390:	70 f0       	brcs	.+28     	; 0x3ae <UART_Init+0xb4>
 392:	80 b5       	in	r24, 0x20	; 32
 394:	8f 77       	andi	r24, 0x7F	; 127
 396:	80 bd       	out	0x20, r24	; 32
 398:	80 b5       	in	r24, 0x20	; 32
 39a:	80 68       	ori	r24, 0x80	; 128
 39c:	80 bd       	out	0x20, r24	; 32
 39e:	80 b5       	in	r24, 0x20	; 32
 3a0:	29 81       	ldd	r18, Y+1	; 0x01
 3a2:	3a 81       	ldd	r19, Y+2	; 0x02
 3a4:	22 27       	eor	r18, r18
 3a6:	3f 70       	andi	r19, 0x0F	; 15
 3a8:	80 7f       	andi	r24, 0xF0	; 240
 3aa:	83 2b       	or	r24, r19
 3ac:	80 bd       	out	0x20, r24	; 32
 3ae:	89 b1       	in	r24, 0x09	; 9
 3b0:	89 81       	ldd	r24, Y+1	; 0x01
 3b2:	9a 81       	ldd	r25, Y+2	; 0x02
 3b4:	89 b9       	out	0x09, r24	; 9
 3b6:	80 b5       	in	r24, 0x20	; 32
 3b8:	80 68       	ori	r24, 0x80	; 128
 3ba:	80 bd       	out	0x20, r24	; 32
 3bc:	20 b5       	in	r18, 0x20	; 32
 3be:	30 e1       	ldi	r19, 0x10	; 16
 3c0:	03 9f       	mul	r16, r19
 3c2:	c0 01       	movw	r24, r0
 3c4:	11 24       	eor	r1, r1
 3c6:	02 2f       	mov	r16, r18
 3c8:	0f 7c       	andi	r16, 0xCF	; 207
 3ca:	80 2b       	or	r24, r16
 3cc:	80 bd       	out	0x20, r24	; 32
 3ce:	20 b5       	in	r18, 0x20	; 32
 3d0:	8f 2d       	mov	r24, r15
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	92 2f       	mov	r25, r18
 3e2:	97 7f       	andi	r25, 0xF7	; 247
 3e4:	89 2b       	or	r24, r25
 3e6:	80 bd       	out	0x20, r24	; 32
 3e8:	20 b5       	in	r18, 0x20	; 32
 3ea:	91 2f       	mov	r25, r17
 3ec:	93 70       	andi	r25, 0x03	; 3
 3ee:	89 2f       	mov	r24, r25
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	92 2f       	mov	r25, r18
 3f8:	99 7f       	andi	r25, 0xF9	; 249
 3fa:	89 2b       	or	r24, r25
 3fc:	80 bd       	out	0x20, r24	; 32
 3fe:	8a b1       	in	r24, 0x0a	; 10
 400:	8b 7f       	andi	r24, 0xFB	; 251
 402:	91 2f       	mov	r25, r17
 404:	94 70       	andi	r25, 0x04	; 4
 406:	89 2b       	or	r24, r25
 408:	8a b9       	out	0x0a, r24	; 10
 40a:	10 93 b8 02 	sts	0x02B8, r17	; 0x8002b8 <enuUARTCharacterSizeState>
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <enuUARTGroupState>
 414:	0f c0       	rjmp	.+30     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	0d c0       	rjmp	.+26     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	0b c0       	rjmp	.+22     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	09 c0       	rjmp	.+18     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	07 c0       	rjmp	.+14     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	05 c0       	rjmp	.+10     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	03 c0       	rjmp	.+6      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	01 c0       	rjmp	.+2      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	0f 90       	pop	r0
 436:	0f 90       	pop	r0
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	1f 91       	pop	r17
 43e:	0f 91       	pop	r16
 440:	ff 90       	pop	r15
 442:	08 95       	ret

00000444 <UART_SendString>:
* Parameters	: *pu16Data
* Return Value	: enuErrorStatus_t
* Description  : Initiate a data transmission from UART module to external module
*************************************************************************************************/
enuErrorStatus_t UART_SendString(uint8_t* pu8String)
{
 444:	ac 01       	movw	r20, r24
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex = 0;
	uint8_t u8Flag = LOW;	
	
	if(enuUARTGroupState == UART_INIT_DONE)
 446:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <enuUARTGroupState>
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	39 f5       	brne	.+78     	; 0x49c <UART_SendString+0x58>
	{
		/* Enabling the transmit enable to start transmission */
		SET_BIT(UCSRB_R, UART_TXEN_BIT);
 44e:	8a b1       	in	r24, 0x0a	; 10
 450:	88 60       	ori	r24, 0x08	; 8
 452:	8a b9       	out	0x0a, r24	; 10
*************************************************************************************************/
enuErrorStatus_t UART_SendString(uint8_t* pu8String)
{
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex = 0;
	uint8_t u8Flag = LOW;	
 454:	30 e0       	ldi	r19, 0x00	; 0
* Description  : Initiate a data transmission from UART module to external module
*************************************************************************************************/
enuErrorStatus_t UART_SendString(uint8_t* pu8String)
{
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex = 0;
 456:	90 e0       	ldi	r25, 0x00	; 0
		/* Enabling the transmit enable to start transmission */
		SET_BIT(UCSRB_R, UART_TXEN_BIT);
		do
		{		
			/* Inserting the data to be transmitted into the data register */
			UDR_R = *(pu8String + u8LoopIndex);
 458:	fa 01       	movw	r30, r20
 45a:	e9 0f       	add	r30, r25
 45c:	f1 1d       	adc	r31, r1
 45e:	80 81       	ld	r24, Z
 460:	8c b9       	out	0x0c, r24	; 12
			/* Waiting for the data until it has successfully been transmitted */
			while(IS_BIT_CLEAR(UCSRA_R, UART_TXC_BIT));
 462:	5e 9b       	sbis	0x0b, 6	; 11
 464:	fe cf       	rjmp	.-4      	; 0x462 <UART_SendString+0x1e>
			/* Clearing transmission complete flag */
			SET_BIT(UCSRA_R, UART_TXC_BIT);
 466:	2b b1       	in	r18, 0x0b	; 11
 468:	20 64       	ori	r18, 0x40	; 64
 46a:	2b b9       	out	0x0b, r18	; 11
			/* Incrementing the index of the input string */
			u8LoopIndex++;
 46c:	9f 5f       	subi	r25, 0xFF	; 255
			/* Checking if the next element in the input string is \n or \r */
			if((*(pu8String + u8LoopIndex) == '\n') || (*(pu8String + u8LoopIndex) == '\r') || (u8LoopIndex == UART_MAX_STRING_SIZE))
 46e:	fa 01       	movw	r30, r20
 470:	e9 0f       	add	r30, r25
 472:	f1 1d       	adc	r31, r1
 474:	20 81       	ld	r18, Z
 476:	2a 30       	cpi	r18, 0x0A	; 10
 478:	29 f0       	breq	.+10     	; 0x484 <UART_SendString+0x40>
 47a:	2d 30       	cpi	r18, 0x0D	; 13
 47c:	29 f0       	breq	.+10     	; 0x488 <UART_SendString+0x44>
 47e:	9f 3f       	cpi	r25, 0xFF	; 255
 480:	31 f4       	brne	.+12     	; 0x48e <UART_SendString+0x4a>
 482:	04 c0       	rjmp	.+8      	; 0x48c <UART_SendString+0x48>
			{
				/* Raising the flag to break the loop */
				u8Flag = HIGH;
 484:	31 e0       	ldi	r19, 0x01	; 1
 486:	03 c0       	rjmp	.+6      	; 0x48e <UART_SendString+0x4a>
 488:	31 e0       	ldi	r19, 0x01	; 1
 48a:	01 c0       	rjmp	.+2      	; 0x48e <UART_SendString+0x4a>
 48c:	31 e0       	ldi	r19, 0x01	; 1
			}
			else
			{
			}
		} while(u8Flag == LOW);
 48e:	33 23       	and	r19, r19
 490:	19 f3       	breq	.-58     	; 0x458 <UART_SendString+0x14>
		/* Disabling the transmit enable to stop transmission */
		CLEAR_BIT(UCSRB_R, UART_TXEN_BIT);
 492:	8a b1       	in	r24, 0x0a	; 10
 494:	87 7f       	andi	r24, 0xF7	; 247
 496:	8a b9       	out	0x0a, r24	; 10
		enuRetVar = E_OK;
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
 49c:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;	
}
 49e:	08 95       	ret

000004a0 <UART_ReceiveString>:
* Parameters	: *pu16Data - u8BufferMaxSize
* Return Value	: enuErrorStatus_t
* Description  : Initiate a data reception on UART module from external module
*************************************************************************************************/
enuErrorStatus_t UART_ReceiveString(uint8_t* pu8String)
{
 4a0:	ac 01       	movw	r20, r24
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex = 0;
	uint8_t u8Flag = LOW;
	uint8_t u8TempData;
			
	if(enuUARTGroupState == UART_INIT_DONE)
 4a2:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <enuUARTGroupState>
 4a6:	81 30       	cpi	r24, 0x01	; 1
 4a8:	f9 f4       	brne	.+62     	; 0x4e8 <UART_ReceiveString+0x48>
	{
		/* Enabling the receive enable to start reception */
		SET_BIT(UCSRB_R, UART_RXEN_BIT);
 4aa:	8a b1       	in	r24, 0x0a	; 10
 4ac:	80 61       	ori	r24, 0x10	; 16
 4ae:	8a b9       	out	0x0a, r24	; 10
*************************************************************************************************/
enuErrorStatus_t UART_ReceiveString(uint8_t* pu8String)
{
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex = 0;
	uint8_t u8Flag = LOW;
 4b0:	30 e0       	ldi	r19, 0x00	; 0
* Description  : Initiate a data reception on UART module from external module
*************************************************************************************************/
enuErrorStatus_t UART_ReceiveString(uint8_t* pu8String)
{
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex = 0;
 4b2:	20 e0       	ldi	r18, 0x00	; 0
		/* Enabling the receive enable to start reception */
		SET_BIT(UCSRB_R, UART_RXEN_BIT);
		do 
		{
			/* Waiting for the data until it has successfully been received */
			while(IS_BIT_CLEAR(UCSRA_R, UART_RXC_BIT));
 4b4:	5f 9b       	sbis	0x0b, 7	; 11
 4b6:	fe cf       	rjmp	.-4      	; 0x4b4 <UART_ReceiveString+0x14>
			/* Clearing reception complete flag */
			SET_BIT(UCSRA_R, UART_RXC_BIT);
 4b8:	9b b1       	in	r25, 0x0b	; 11
 4ba:	90 68       	ori	r25, 0x80	; 128
 4bc:	9b b9       	out	0x0b, r25	; 11
			/* Adding the value of the received data from the UART data register into a temporary data variable */
			u8TempData = UDR_R;
 4be:	9c b1       	in	r25, 0x0c	; 12
			/* Checking if the value of the last received data inside the temporary data variable is not \n or \r */
			if((u8TempData != '\n') && (u8TempData != '\r'))
 4c0:	9a 30       	cpi	r25, 0x0A	; 10
 4c2:	41 f0       	breq	.+16     	; 0x4d4 <UART_ReceiveString+0x34>
 4c4:	9d 30       	cpi	r25, 0x0D	; 13
 4c6:	41 f0       	breq	.+16     	; 0x4d8 <UART_ReceiveString+0x38>
			{
				/* Adding the value of the temporary data variable into the the data array */
				*(pu8String + u8LoopIndex) = u8TempData;
 4c8:	fa 01       	movw	r30, r20
 4ca:	e2 0f       	add	r30, r18
 4cc:	f1 1d       	adc	r31, r1
 4ce:	90 83       	st	Z, r25
				/* Incrementing the index of the array */
				u8LoopIndex++;
 4d0:	2f 5f       	subi	r18, 0xFF	; 255
 4d2:	03 c0       	rjmp	.+6      	; 0x4da <UART_ReceiveString+0x3a>
			}
			else
			{
				/* Raising the flag to break the loop */
				u8Flag = HIGH;
 4d4:	31 e0       	ldi	r19, 0x01	; 1
 4d6:	01 c0       	rjmp	.+2      	; 0x4da <UART_ReceiveString+0x3a>
 4d8:	31 e0       	ldi	r19, 0x01	; 1
			}
		} while(u8Flag == LOW);
 4da:	33 23       	and	r19, r19
 4dc:	59 f3       	breq	.-42     	; 0x4b4 <UART_ReceiveString+0x14>
		/* Disabling the receive enable to stop reception */
		CLEAR_BIT(UCSRB_R, UART_RXEN_BIT);
 4de:	8a b1       	in	r24, 0x0a	; 10
 4e0:	8f 7e       	andi	r24, 0xEF	; 239
 4e2:	8a b9       	out	0x0a, r24	; 10
		enuRetVar = E_OK;
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
 4e8:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
 4ea:	08 95       	ret

000004ec <__udivmodsi4>:
 4ec:	a1 e2       	ldi	r26, 0x21	; 33
 4ee:	1a 2e       	mov	r1, r26
 4f0:	aa 1b       	sub	r26, r26
 4f2:	bb 1b       	sub	r27, r27
 4f4:	fd 01       	movw	r30, r26
 4f6:	0d c0       	rjmp	.+26     	; 0x512 <__udivmodsi4_ep>

000004f8 <__udivmodsi4_loop>:
 4f8:	aa 1f       	adc	r26, r26
 4fa:	bb 1f       	adc	r27, r27
 4fc:	ee 1f       	adc	r30, r30
 4fe:	ff 1f       	adc	r31, r31
 500:	a2 17       	cp	r26, r18
 502:	b3 07       	cpc	r27, r19
 504:	e4 07       	cpc	r30, r20
 506:	f5 07       	cpc	r31, r21
 508:	20 f0       	brcs	.+8      	; 0x512 <__udivmodsi4_ep>
 50a:	a2 1b       	sub	r26, r18
 50c:	b3 0b       	sbc	r27, r19
 50e:	e4 0b       	sbc	r30, r20
 510:	f5 0b       	sbc	r31, r21

00000512 <__udivmodsi4_ep>:
 512:	66 1f       	adc	r22, r22
 514:	77 1f       	adc	r23, r23
 516:	88 1f       	adc	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	1a 94       	dec	r1
 51c:	69 f7       	brne	.-38     	; 0x4f8 <__udivmodsi4_loop>
 51e:	60 95       	com	r22
 520:	70 95       	com	r23
 522:	80 95       	com	r24
 524:	90 95       	com	r25
 526:	9b 01       	movw	r18, r22
 528:	ac 01       	movw	r20, r24
 52a:	bd 01       	movw	r22, r26
 52c:	cf 01       	movw	r24, r30
 52e:	08 95       	ret

00000530 <_exit>:
 530:	f8 94       	cli

00000532 <__stop_program>:
 532:	ff cf       	rjmp	.-2      	; 0x532 <__stop_program>
