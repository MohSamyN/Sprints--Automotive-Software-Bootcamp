
I2CSlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000001c8  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800064  00800064  00000260  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010d6  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e8  00000000  00000000  00001472  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ca  00000000  00000000  00001b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00002124  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c2a  00000000  00000000  00002280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d6  00000000  00000000  00002eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003580  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 36       	cpi	r26, 0x69	; 105
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6f 00 	call	0xde	; 0xde <main>
  8a:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_PortInit>:
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;	
}
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	88 f4       	brcc	.+34     	; 0xb8 <DIO_PortInit+0x26>
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	fc 01       	movw	r30, r24
  9a:	e0 5a       	subi	r30, 0xA0	; 160
  9c:	ff 4f       	sbci	r31, 0xFF	; 255
  9e:	e0 81       	ld	r30, Z
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	df 01       	movw	r26, r30
  a4:	11 97       	sbiw	r26, 0x01	; 1
  a6:	6c 93       	st	X, r22
  a8:	40 83       	st	Z, r20
  aa:	fc 01       	movw	r30, r24
  ac:	ec 59       	subi	r30, 0x9C	; 156
  ae:	ff 4f       	sbci	r31, 0xFF	; 255
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	20 83       	st	Z, r18
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	08 95       	ret
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	08 95       	ret

000000bc <DIO_PortWrite>:
*************************************************************************************************/
enuErrorStatus_t DIO_PortWrite(enuDIOPortNo_t enuDIOPortNo, uint8_t u8PortData)
{
	enuErrorStatus_t enuRetVar;
	
	if(aenuDIOPortState[enuDIOPortNo] == DIO_INIT_DONE)
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	fc 01       	movw	r30, r24
  c0:	ec 59       	subi	r30, 0x9C	; 156
  c2:	ff 4f       	sbci	r31, 0xFF	; 255
  c4:	20 81       	ld	r18, Z
  c6:	21 30       	cpi	r18, 0x01	; 1
  c8:	41 f4       	brne	.+16     	; 0xda <DIO_PortWrite+0x1e>
	{
		/* Writing the value into the corresponding port */
		PORTx_R(enuDIOPortNo) = u8PortData;
  ca:	fc 01       	movw	r30, r24
  cc:	e0 5a       	subi	r30, 0xA0	; 160
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	e0 81       	ld	r30, Z
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	60 83       	st	Z, r22
		enuRetVar = E_OK;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
  da:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;	
}
  dc:	08 95       	ret

000000de <main>:
#include "DIO.h"
#include "TWI.h"


int main(void)
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	00 d0       	rcall	.+0      	; 0xe4 <main+0x6>
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
   enuTWIStatus_t enuTWIStatus;
	uint8_t u8Data;
	
	DIO_PortInit(PORTD, 0xFF, 0x00);
  e8:	40 e0       	ldi	r20, 0x00	; 0
  ea:	6f ef       	ldi	r22, 0xFF	; 255
  ec:	83 e0       	ldi	r24, 0x03	; 3
  ee:	0e 94 49 00 	call	0x92	; 0x92 <DIO_PortInit>
	TWI_SlaveInit(0xA0, TWI_DISABLE_GENERAL_CALL_RECOGNITION, TWI_ENABLE_ACKNOWLEDGE);
  f2:	41 e0       	ldi	r20, 0x01	; 1
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	80 ea       	ldi	r24, 0xA0	; 160
  f8:	0e 94 97 00 	call	0x12e	; 0x12e <TWI_SlaveInit>
	// Slave Read
	TWI_Listen();
  fc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <TWI_Listen>
	TWI_CheckStatus(&enuTWIStatus);
 100:	ce 01       	movw	r24, r28
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	0e 94 cb 00 	call	0x196	; 0x196 <TWI_CheckStatus>
	if(enuTWIStatus == TWI_SLAVE_SLA_W_ACK_CONDITION_CODE)
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	80 36       	cpi	r24, 0x60	; 96
 10c:	79 f4       	brne	.+30     	; 0x12c <main+0x4e>
	{	
		TWI_Read(&u8Data);
 10e:	ce 01       	movw	r24, r28
 110:	02 96       	adiw	r24, 0x02	; 2
 112:	0e 94 b7 00 	call	0x16e	; 0x16e <TWI_Read>
		TWI_CheckStatus(&enuTWIStatus);
 116:	ce 01       	movw	r24, r28
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	0e 94 cb 00 	call	0x196	; 0x196 <TWI_CheckStatus>
		if(enuTWIStatus == TWI_SLAVE_PREVIOUSLY_SLA_W_ACK_CONDITION_CODE)
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	80 38       	cpi	r24, 0x80	; 128
 122:	21 f4       	brne	.+8      	; 0x12c <main+0x4e>
		{		
			DIO_PortWrite(PORTD, u8Data);
 124:	6a 81       	ldd	r22, Y+2	; 0x02
 126:	83 e0       	ldi	r24, 0x03	; 3
 128:	0e 94 5e 00 	call	0xbc	; 0xbc <DIO_PortWrite>
 12c:	ff cf       	rjmp	.-2      	; 0x12c <main+0x4e>

0000012e <TWI_SlaveInit>:
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;
}
 12e:	80 3f       	cpi	r24, 0xF0	; 240
 130:	c0 f4       	brcc	.+48     	; 0x162 <TWI_SlaveInit+0x34>
 132:	62 30       	cpi	r22, 0x02	; 2
 134:	c0 f4       	brcc	.+48     	; 0x166 <TWI_SlaveInit+0x38>
 136:	42 30       	cpi	r20, 0x02	; 2
 138:	c0 f4       	brcc	.+48     	; 0x16a <TWI_SlaveInit+0x3c>
 13a:	82 b9       	out	0x02, r24	; 2
 13c:	82 b1       	in	r24, 0x02	; 2
 13e:	8e 7f       	andi	r24, 0xFE	; 254
 140:	68 2b       	or	r22, r24
 142:	62 b9       	out	0x02, r22	; 2
 144:	86 b7       	in	r24, 0x36	; 54
 146:	90 e4       	ldi	r25, 0x40	; 64
 148:	49 9f       	mul	r20, r25
 14a:	a0 01       	movw	r20, r0
 14c:	11 24       	eor	r1, r1
 14e:	8f 7b       	andi	r24, 0xBF	; 191
 150:	48 2b       	or	r20, r24
 152:	46 bf       	out	0x36, r20	; 54
 154:	86 b7       	in	r24, 0x36	; 54
 156:	84 60       	ori	r24, 0x04	; 4
 158:	86 bf       	out	0x36, r24	; 54
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <enuTWIGroupState>
 160:	08 95       	ret
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	08 95       	ret
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	08 95       	ret
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	08 95       	ret

0000016e <TWI_Read>:
 16e:	fc 01       	movw	r30, r24
 170:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <enuTWIGroupState>
 174:	91 30       	cpi	r25, 0x01	; 1
 176:	69 f4       	brne	.+26     	; 0x192 <TWI_Read+0x24>
 178:	96 b7       	in	r25, 0x36	; 54
 17a:	90 68       	ori	r25, 0x80	; 128
 17c:	96 bf       	out	0x36, r25	; 54
 17e:	96 b7       	in	r25, 0x36	; 54
 180:	94 60       	ori	r25, 0x04	; 4
 182:	96 bf       	out	0x36, r25	; 54
 184:	06 b6       	in	r0, 0x36	; 54
 186:	07 fe       	sbrs	r0, 7
 188:	fd cf       	rjmp	.-6      	; 0x184 <TWI_Read+0x16>
 18a:	83 b1       	in	r24, 0x03	; 3
 18c:	80 83       	st	Z, r24
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	08 95       	ret
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	08 95       	ret

00000196 <TWI_CheckStatus>:
 196:	fc 01       	movw	r30, r24
 198:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <enuTWIGroupState>
 19c:	91 30       	cpi	r25, 0x01	; 1
 19e:	29 f4       	brne	.+10     	; 0x1aa <TWI_CheckStatus+0x14>
 1a0:	91 b1       	in	r25, 0x01	; 1
 1a2:	98 7f       	andi	r25, 0xF8	; 248
 1a4:	90 83       	st	Z, r25
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	08 95       	ret
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret

000001ae <TWI_Listen>:
*************************************************************************************************/
enuErrorStatus_t TWI_Listen(void)
{
	enuErrorStatus_t enuRetVar;

	if(enuTWIGroupState == TWI_INIT_DONE)
 1ae:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <enuTWIGroupState>
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	29 f4       	brne	.+10     	; 0x1c0 <TWI_Listen+0x12>
	{
		/* Waiting for the module to be addressed */
		while(IS_BIT_CLEAR(TWCR_R, TWI_INT_FLAG_BIT));		
 1b6:	06 b6       	in	r0, 0x36	; 54
 1b8:	07 fe       	sbrs	r0, 7
 1ba:	fd cf       	rjmp	.-6      	; 0x1b6 <TWI_Listen+0x8>
		enuRetVar = E_OK;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
 1c0:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
 1c2:	08 95       	ret

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
