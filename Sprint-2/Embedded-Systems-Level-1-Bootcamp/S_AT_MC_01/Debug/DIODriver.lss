
DIODriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000006ee  00000782  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006c  0080006c  0000078e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000078e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c86  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071a  00000000  00000000  000014f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a9  00000000  00000000  00001c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  000020b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c6  00000000  00000000  00002154  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b3  00000000  00000000  0000261a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000029cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 46 03 	call	0x68c	; 0x68c <main>
  8a:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Init>:

typedef enum {PORTA, PORTB, PORTC, PORTD} enuDIOPorts_t;

/* A function to initialize all the DIO groups according to the configuration */
enuErrorStatus_t DIO_Init(void)
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
	enuErrorStatus_t enuRetVar;
	const strDIOConfigType_t *pstrConfig;
	uint8_t u8LoopIndex;
	uint8_t u8ErrorFlag = TRUE;
  9a:	91 e0       	ldi	r25, 0x01	; 1
	
	for(u8LoopIndex = 0; ((u8LoopIndex < DIO_GROUPS_NO) && (u8ErrorFlag == TRUE)); u8LoopIndex++)
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	07 c1       	rjmp	.+526    	; 0x2ae <DIO_Init+0x21c>
	{
		pstrConfig = &astrDIOConfigParameters[u8LoopIndex];
  a0:	28 2f       	mov	r18, r24
  a2:	30 e0       	ldi	r19, 0x00	; 0
		if((pstrConfig->enuPinNo < DIO_PINS_NO) && (pstrConfig->enuPinDir < DIO_DIRECTION_STATES))
  a4:	f9 01       	movw	r30, r18
  a6:	ee 0f       	add	r30, r30
  a8:	ff 1f       	adc	r31, r31
  aa:	e2 0f       	add	r30, r18
  ac:	f3 1f       	adc	r31, r19
  ae:	e0 5a       	subi	r30, 0xA0	; 160
  b0:	ff 4f       	sbci	r31, 0xFF	; 255
  b2:	40 81       	ld	r20, Z
  b4:	40 32       	cpi	r20, 0x20	; 32
  b6:	08 f0       	brcs	.+2      	; 0xba <DIO_Init+0x28>
  b8:	f6 c0       	rjmp	.+492    	; 0x2a6 <DIO_Init+0x214>
  ba:	f9 01       	movw	r30, r18
  bc:	ee 0f       	add	r30, r30
  be:	ff 1f       	adc	r31, r31
  c0:	e2 0f       	add	r30, r18
  c2:	f3 1f       	adc	r31, r19
  c4:	e0 5a       	subi	r30, 0xA0	; 160
  c6:	ff 4f       	sbci	r31, 0xFF	; 255
  c8:	e1 81       	ldd	r30, Z+1	; 0x01
  ca:	e2 30       	cpi	r30, 0x02	; 2
  cc:	08 f0       	brcs	.+2      	; 0xd0 <DIO_Init+0x3e>
  ce:	ed c0       	rjmp	.+474    	; 0x2aa <DIO_Init+0x218>
		{
			switch(DIO_PORT_NO(pstrConfig->enuPinNo))
  d0:	54 2f       	mov	r21, r20
  d2:	56 95       	lsr	r21
  d4:	56 95       	lsr	r21
  d6:	56 95       	lsr	r21
  d8:	51 30       	cpi	r21, 0x01	; 1
  da:	e9 f1       	breq	.+122    	; 0x156 <DIO_Init+0xc4>
  dc:	38 f0       	brcs	.+14     	; 0xec <DIO_Init+0x5a>
  de:	52 30       	cpi	r21, 0x02	; 2
  e0:	09 f4       	brne	.+2      	; 0xe4 <DIO_Init+0x52>
  e2:	6e c0       	rjmp	.+220    	; 0x1c0 <DIO_Init+0x12e>
  e4:	53 30       	cpi	r21, 0x03	; 3
  e6:	09 f4       	brne	.+2      	; 0xea <DIO_Init+0x58>
  e8:	a0 c0       	rjmp	.+320    	; 0x22a <DIO_Init+0x198>
  ea:	d6 c0       	rjmp	.+428    	; 0x298 <DIO_Init+0x206>
			{
				case PORTA:
				{
					/* Setting the direction of data [Input / Output] */
					ASSIGN_BIT(DDRA_R, DIO_PIN_NO(pstrConfig->enuPinNo), pstrConfig->enuPinDir);
  ec:	aa b3       	in	r26, 0x1a	; 26
  ee:	47 70       	andi	r20, 0x07	; 7
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	eb 01       	movw	r28, r22
  f6:	04 2e       	mov	r0, r20
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_Init+0x6c>
  fa:	cc 0f       	add	r28, r28
  fc:	dd 1f       	adc	r29, r29
  fe:	0a 94       	dec	r0
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_Init+0x68>
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	8f 01       	movw	r16, r30
 106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_Init+0x7a>
 108:	00 0f       	add	r16, r16
 10a:	11 1f       	adc	r17, r17
 10c:	4a 95       	dec	r20
 10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_Init+0x76>
 110:	a8 01       	movw	r20, r16
 112:	5c 2f       	mov	r21, r28
 114:	50 95       	com	r21
 116:	5a 23       	and	r21, r26
 118:	45 2b       	or	r20, r21
 11a:	4a bb       	out	0x1a, r20	; 26
					/* Selecting whether a pull-up resistor is connected to the selected pin or not */
					ASSIGN_BIT(PORTA_R, DIO_PIN_NO(pstrConfig->enuPinNo), pstrConfig->enuPullupResEn);					
 11c:	bb b3       	in	r27, 0x1b	; 27
 11e:	f9 01       	movw	r30, r18
 120:	ee 0f       	add	r30, r30
 122:	ff 1f       	adc	r31, r31
 124:	e2 0f       	add	r30, r18
 126:	f3 1f       	adc	r31, r19
 128:	e0 5a       	subi	r30, 0xA0	; 160
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	a0 81       	ld	r26, Z
 12e:	a7 70       	andi	r26, 0x07	; 7
 130:	0a 2e       	mov	r0, r26
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_Init+0xa6>
 134:	66 0f       	add	r22, r22
 136:	77 1f       	adc	r23, r23
 138:	0a 94       	dec	r0
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_Init+0xa2>
 13c:	52 81       	ldd	r21, Z+2	; 0x02
 13e:	45 2f       	mov	r20, r21
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_Init+0xb6>
 144:	44 0f       	add	r20, r20
 146:	55 1f       	adc	r21, r21
 148:	aa 95       	dec	r26
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_Init+0xb2>
 14c:	60 95       	com	r22
 14e:	6b 23       	and	r22, r27
 150:	46 2b       	or	r20, r22
 152:	4b bb       	out	0x1b, r20	; 27
				}
				break;
 154:	a2 c0       	rjmp	.+324    	; 0x29a <DIO_Init+0x208>
				case PORTB:
				{
					/* Setting the direction of data [Input / Output] */
					ASSIGN_BIT(DDRB_R, DIO_PIN_NO(pstrConfig->enuPinNo), pstrConfig->enuPinDir);
 156:	a7 b3       	in	r26, 0x17	; 23
 158:	47 70       	andi	r20, 0x07	; 7
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	eb 01       	movw	r28, r22
 160:	04 2e       	mov	r0, r20
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_Init+0xd6>
 164:	cc 0f       	add	r28, r28
 166:	dd 1f       	adc	r29, r29
 168:	0a 94       	dec	r0
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_Init+0xd2>
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	8f 01       	movw	r16, r30
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_Init+0xe4>
 172:	00 0f       	add	r16, r16
 174:	11 1f       	adc	r17, r17
 176:	4a 95       	dec	r20
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_Init+0xe0>
 17a:	a8 01       	movw	r20, r16
 17c:	5c 2f       	mov	r21, r28
 17e:	50 95       	com	r21
 180:	5a 23       	and	r21, r26
 182:	45 2b       	or	r20, r21
 184:	47 bb       	out	0x17, r20	; 23
					/* Selecting whether a pull-up resistor is connected to the selected pin or not */
					ASSIGN_BIT(PORTB_R, DIO_PIN_NO(pstrConfig->enuPinNo), pstrConfig->enuPullupResEn);
 186:	b8 b3       	in	r27, 0x18	; 24
 188:	f9 01       	movw	r30, r18
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	e2 0f       	add	r30, r18
 190:	f3 1f       	adc	r31, r19
 192:	e0 5a       	subi	r30, 0xA0	; 160
 194:	ff 4f       	sbci	r31, 0xFF	; 255
 196:	a0 81       	ld	r26, Z
 198:	a7 70       	andi	r26, 0x07	; 7
 19a:	0a 2e       	mov	r0, r26
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_Init+0x110>
 19e:	66 0f       	add	r22, r22
 1a0:	77 1f       	adc	r23, r23
 1a2:	0a 94       	dec	r0
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_Init+0x10c>
 1a6:	52 81       	ldd	r21, Z+2	; 0x02
 1a8:	45 2f       	mov	r20, r21
 1aa:	50 e0       	ldi	r21, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_Init+0x120>
 1ae:	44 0f       	add	r20, r20
 1b0:	55 1f       	adc	r21, r21
 1b2:	aa 95       	dec	r26
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_Init+0x11c>
 1b6:	60 95       	com	r22
 1b8:	6b 23       	and	r22, r27
 1ba:	46 2b       	or	r20, r22
 1bc:	48 bb       	out	0x18, r20	; 24
				}
				break;
 1be:	6d c0       	rjmp	.+218    	; 0x29a <DIO_Init+0x208>
				case PORTC:
				{
					/* Setting the direction of data [Input / Output] */
					ASSIGN_BIT(DDRC_R, DIO_PIN_NO(pstrConfig->enuPinNo), pstrConfig->enuPinDir);
 1c0:	a4 b3       	in	r26, 0x14	; 20
 1c2:	47 70       	andi	r20, 0x07	; 7
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	eb 01       	movw	r28, r22
 1ca:	04 2e       	mov	r0, r20
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_Init+0x140>
 1ce:	cc 0f       	add	r28, r28
 1d0:	dd 1f       	adc	r29, r29
 1d2:	0a 94       	dec	r0
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_Init+0x13c>
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	8f 01       	movw	r16, r30
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_Init+0x14e>
 1dc:	00 0f       	add	r16, r16
 1de:	11 1f       	adc	r17, r17
 1e0:	4a 95       	dec	r20
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_Init+0x14a>
 1e4:	a8 01       	movw	r20, r16
 1e6:	5c 2f       	mov	r21, r28
 1e8:	50 95       	com	r21
 1ea:	5a 23       	and	r21, r26
 1ec:	45 2b       	or	r20, r21
 1ee:	44 bb       	out	0x14, r20	; 20
					/* Selecting whether a pull-up resistor is connected to the selected pin or not */
					ASSIGN_BIT(PORTC_R, DIO_PIN_NO(pstrConfig->enuPinNo), pstrConfig->enuPullupResEn);
 1f0:	b5 b3       	in	r27, 0x15	; 21
 1f2:	f9 01       	movw	r30, r18
 1f4:	ee 0f       	add	r30, r30
 1f6:	ff 1f       	adc	r31, r31
 1f8:	e2 0f       	add	r30, r18
 1fa:	f3 1f       	adc	r31, r19
 1fc:	e0 5a       	subi	r30, 0xA0	; 160
 1fe:	ff 4f       	sbci	r31, 0xFF	; 255
 200:	a0 81       	ld	r26, Z
 202:	a7 70       	andi	r26, 0x07	; 7
 204:	0a 2e       	mov	r0, r26
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_Init+0x17a>
 208:	66 0f       	add	r22, r22
 20a:	77 1f       	adc	r23, r23
 20c:	0a 94       	dec	r0
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_Init+0x176>
 210:	52 81       	ldd	r21, Z+2	; 0x02
 212:	45 2f       	mov	r20, r21
 214:	50 e0       	ldi	r21, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_Init+0x18a>
 218:	44 0f       	add	r20, r20
 21a:	55 1f       	adc	r21, r21
 21c:	aa 95       	dec	r26
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_Init+0x186>
 220:	60 95       	com	r22
 222:	6b 23       	and	r22, r27
 224:	46 2b       	or	r20, r22
 226:	45 bb       	out	0x15, r20	; 21
				}
				break;
 228:	38 c0       	rjmp	.+112    	; 0x29a <DIO_Init+0x208>
				case PORTD:
				{
					/* Setting the direction of data [Input / Output] */
					ASSIGN_BIT(DDRD_R, DIO_PIN_NO(pstrConfig->enuPinNo), pstrConfig->enuPinDir);
 22a:	f1 b3       	in	r31, 0x11	; 17
 22c:	47 70       	andi	r20, 0x07	; 7
 22e:	a1 e0       	ldi	r26, 0x01	; 1
 230:	b0 e0       	ldi	r27, 0x00	; 0
 232:	ed 01       	movw	r28, r26
 234:	04 2e       	mov	r0, r20
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_Init+0x1aa>
 238:	cc 0f       	add	r28, r28
 23a:	dd 1f       	adc	r29, r29
 23c:	0a 94       	dec	r0
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_Init+0x1a6>
 240:	6e 2f       	mov	r22, r30
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	8b 01       	movw	r16, r22
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_Init+0x1ba>
 248:	00 0f       	add	r16, r16
 24a:	11 1f       	adc	r17, r17
 24c:	4a 95       	dec	r20
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_Init+0x1b6>
 250:	a8 01       	movw	r20, r16
 252:	5c 2f       	mov	r21, r28
 254:	50 95       	com	r21
 256:	5f 23       	and	r21, r31
 258:	45 2b       	or	r20, r21
 25a:	41 bb       	out	0x11, r20	; 17
					/* Selecting whether a pull-up resistor is connected to the selected pin or not */
					ASSIGN_BIT(PORTD_R, DIO_PIN_NO(pstrConfig->enuPinNo), pstrConfig->enuPullupResEn);
 25c:	d2 b3       	in	r29, 0x12	; 18
 25e:	f9 01       	movw	r30, r18
 260:	ee 0f       	add	r30, r30
 262:	ff 1f       	adc	r31, r31
 264:	e2 0f       	add	r30, r18
 266:	f3 1f       	adc	r31, r19
 268:	e0 5a       	subi	r30, 0xA0	; 160
 26a:	ff 4f       	sbci	r31, 0xFF	; 255
 26c:	c0 81       	ld	r28, Z
 26e:	c7 70       	andi	r28, 0x07	; 7
 270:	bd 01       	movw	r22, r26
 272:	0c 2e       	mov	r0, r28
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_Init+0x1e8>
 276:	66 0f       	add	r22, r22
 278:	77 1f       	adc	r23, r23
 27a:	0a 94       	dec	r0
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_Init+0x1e4>
 27e:	52 81       	ldd	r21, Z+2	; 0x02
 280:	45 2f       	mov	r20, r21
 282:	50 e0       	ldi	r21, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_Init+0x1f8>
 286:	44 0f       	add	r20, r20
 288:	55 1f       	adc	r21, r21
 28a:	ca 95       	dec	r28
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_Init+0x1f4>
 28e:	60 95       	com	r22
 290:	6d 23       	and	r22, r29
 292:	46 2b       	or	r20, r22
 294:	42 bb       	out	0x12, r20	; 18
				}
				break;
 296:	01 c0       	rjmp	.+2      	; 0x29a <DIO_Init+0x208>
				default:
				{
					u8ErrorFlag = FALSE;
 298:	90 e0       	ldi	r25, 0x00	; 0
				}			
			}
			aenuDIOGroupState[u8LoopIndex] = DIO_INIT_DONE;
 29a:	f9 01       	movw	r30, r18
 29c:	e4 59       	subi	r30, 0x94	; 148
 29e:	ff 4f       	sbci	r31, 0xFF	; 255
 2a0:	41 e0       	ldi	r20, 0x01	; 1
 2a2:	40 83       	st	Z, r20
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <DIO_Init+0x21a>
		}
		else
		{
			u8ErrorFlag = FALSE;
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <DIO_Init+0x21a>
 2aa:	90 e0       	ldi	r25, 0x00	; 0
	enuErrorStatus_t enuRetVar;
	const strDIOConfigType_t *pstrConfig;
	uint8_t u8LoopIndex;
	uint8_t u8ErrorFlag = TRUE;
	
	for(u8LoopIndex = 0; ((u8LoopIndex < DIO_GROUPS_NO) && (u8ErrorFlag == TRUE)); u8LoopIndex++)
 2ac:	8f 5f       	subi	r24, 0xFF	; 255
 2ae:	84 30       	cpi	r24, 0x04	; 4
 2b0:	18 f4       	brcc	.+6      	; 0x2b8 <DIO_Init+0x226>
 2b2:	91 30       	cpi	r25, 0x01	; 1
 2b4:	09 f4       	brne	.+2      	; 0x2b8 <DIO_Init+0x226>
 2b6:	f4 ce       	rjmp	.-536    	; 0xa0 <DIO_Init+0xe>
		else
		{
			u8ErrorFlag = FALSE;
		}
	}
	if(u8ErrorFlag == TRUE)
 2b8:	91 30       	cpi	r25, 0x01	; 1
 2ba:	11 f4       	brne	.+4      	; 0x2c0 <DIO_Init+0x22e>
	{
		enuRetVar = E_OK;
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	01 c0       	rjmp	.+2      	; 0x2c2 <DIO_Init+0x230>
	}
	else
	{
		enuRetVar = E_ERROR;
 2c0:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	08 95       	ret

000002cc <DIO_Write>:
enuErrorStatus_t DIO_Write(uint8_t u8GroupId, uint8_t u8Data)
{
	enuErrorStatus_t enuRetVar;
	const strDIOConfigType_t *pstrConfig;
	
	if((u8GroupId < DIO_GROUPS_NO) && (aenuDIOGroupState[u8GroupId] == DIO_INIT_DONE) && (astrDIOConfigParameters[u8GroupId].enuPinDir == OUTPUT))
 2cc:	84 30       	cpi	r24, 0x04	; 4
 2ce:	08 f0       	brcs	.+2      	; 0x2d2 <DIO_Write+0x6>
 2d0:	81 c0       	rjmp	.+258    	; 0x3d4 <DIO_Write+0x108>
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	fc 01       	movw	r30, r24
 2d6:	e4 59       	subi	r30, 0x94	; 148
 2d8:	ff 4f       	sbci	r31, 0xFF	; 255
 2da:	20 81       	ld	r18, Z
 2dc:	21 30       	cpi	r18, 0x01	; 1
 2de:	09 f0       	breq	.+2      	; 0x2e2 <DIO_Write+0x16>
 2e0:	7b c0       	rjmp	.+246    	; 0x3d8 <DIO_Write+0x10c>
 2e2:	fc 01       	movw	r30, r24
 2e4:	ee 0f       	add	r30, r30
 2e6:	ff 1f       	adc	r31, r31
 2e8:	e8 0f       	add	r30, r24
 2ea:	f9 1f       	adc	r31, r25
 2ec:	e0 5a       	subi	r30, 0xA0	; 160
 2ee:	ff 4f       	sbci	r31, 0xFF	; 255
 2f0:	21 81       	ldd	r18, Z+1	; 0x01
 2f2:	21 30       	cpi	r18, 0x01	; 1
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <DIO_Write+0x2c>
 2f6:	72 c0       	rjmp	.+228    	; 0x3dc <DIO_Write+0x110>
	{
		pstrConfig = &astrDIOConfigParameters[u8GroupId];
		switch(DIO_PORT_NO(pstrConfig->enuPinNo))
 2f8:	fc 01       	movw	r30, r24
 2fa:	ee 0f       	add	r30, r30
 2fc:	ff 1f       	adc	r31, r31
 2fe:	8e 0f       	add	r24, r30
 300:	9f 1f       	adc	r25, r31
 302:	fc 01       	movw	r30, r24
 304:	e0 5a       	subi	r30, 0xA0	; 160
 306:	ff 4f       	sbci	r31, 0xFF	; 255
 308:	80 81       	ld	r24, Z
 30a:	98 2f       	mov	r25, r24
 30c:	96 95       	lsr	r25
 30e:	96 95       	lsr	r25
 310:	96 95       	lsr	r25
 312:	91 30       	cpi	r25, 0x01	; 1
 314:	e9 f0       	breq	.+58     	; 0x350 <DIO_Write+0x84>
 316:	30 f0       	brcs	.+12     	; 0x324 <DIO_Write+0x58>
 318:	92 30       	cpi	r25, 0x02	; 2
 31a:	81 f1       	breq	.+96     	; 0x37c <DIO_Write+0xb0>
 31c:	93 30       	cpi	r25, 0x03	; 3
 31e:	09 f4       	brne	.+2      	; 0x322 <DIO_Write+0x56>
 320:	43 c0       	rjmp	.+134    	; 0x3a8 <DIO_Write+0xdc>
 322:	5e c0       	rjmp	.+188    	; 0x3e0 <DIO_Write+0x114>
		{
			case PORTA:
			{
				/* Writing the value into the corresponding pin */
				ASSIGN_BIT(PORTA_R, DIO_PIN_NO(pstrConfig->enuPinNo), u8Data);				
 324:	9b b3       	in	r25, 0x1b	; 27
 326:	87 70       	andi	r24, 0x07	; 7
 328:	21 e0       	ldi	r18, 0x01	; 1
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	08 2e       	mov	r0, r24
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_Write+0x68>
 330:	22 0f       	add	r18, r18
 332:	33 1f       	adc	r19, r19
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_Write+0x64>
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_Write+0x74>
 33c:	66 0f       	add	r22, r22
 33e:	77 1f       	adc	r23, r23
 340:	8a 95       	dec	r24
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_Write+0x70>
 344:	20 95       	com	r18
 346:	29 23       	and	r18, r25
 348:	62 2b       	or	r22, r18
 34a:	6b bb       	out	0x1b, r22	; 27
				enuRetVar = E_OK;
 34c:	81 e0       	ldi	r24, 0x01	; 1
			}
			break;
 34e:	08 95       	ret
			case PORTB:
			{
				/* Writing the value into the corresponding pin */
				ASSIGN_BIT(PORTB_R, DIO_PIN_NO(pstrConfig->enuPinNo), u8Data);
 350:	98 b3       	in	r25, 0x18	; 24
 352:	87 70       	andi	r24, 0x07	; 7
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	08 2e       	mov	r0, r24
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_Write+0x94>
 35c:	22 0f       	add	r18, r18
 35e:	33 1f       	adc	r19, r19
 360:	0a 94       	dec	r0
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_Write+0x90>
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_Write+0xa0>
 368:	66 0f       	add	r22, r22
 36a:	77 1f       	adc	r23, r23
 36c:	8a 95       	dec	r24
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_Write+0x9c>
 370:	20 95       	com	r18
 372:	29 23       	and	r18, r25
 374:	62 2b       	or	r22, r18
 376:	68 bb       	out	0x18, r22	; 24
				enuRetVar = E_OK;
 378:	81 e0       	ldi	r24, 0x01	; 1
			}
			break;
 37a:	08 95       	ret
			case PORTC:
			{
				/* Writing the value into the corresponding pin */
				ASSIGN_BIT(PORTC_R, DIO_PIN_NO(pstrConfig->enuPinNo), u8Data);
 37c:	95 b3       	in	r25, 0x15	; 21
 37e:	87 70       	andi	r24, 0x07	; 7
 380:	21 e0       	ldi	r18, 0x01	; 1
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	08 2e       	mov	r0, r24
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_Write+0xc0>
 388:	22 0f       	add	r18, r18
 38a:	33 1f       	adc	r19, r19
 38c:	0a 94       	dec	r0
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_Write+0xbc>
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_Write+0xcc>
 394:	66 0f       	add	r22, r22
 396:	77 1f       	adc	r23, r23
 398:	8a 95       	dec	r24
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_Write+0xc8>
 39c:	20 95       	com	r18
 39e:	29 23       	and	r18, r25
 3a0:	62 2b       	or	r22, r18
 3a2:	65 bb       	out	0x15, r22	; 21
				enuRetVar = E_OK;
 3a4:	81 e0       	ldi	r24, 0x01	; 1
			}
			break;
 3a6:	08 95       	ret
			case PORTD:
			{
				/* Writing the value into the corresponding pin */
				ASSIGN_BIT(PORTD_R, DIO_PIN_NO(pstrConfig->enuPinNo), u8Data);
 3a8:	92 b3       	in	r25, 0x12	; 18
 3aa:	87 70       	andi	r24, 0x07	; 7
 3ac:	21 e0       	ldi	r18, 0x01	; 1
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	08 2e       	mov	r0, r24
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_Write+0xec>
 3b4:	22 0f       	add	r18, r18
 3b6:	33 1f       	adc	r19, r19
 3b8:	0a 94       	dec	r0
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_Write+0xe8>
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_Write+0xf8>
 3c0:	66 0f       	add	r22, r22
 3c2:	77 1f       	adc	r23, r23
 3c4:	8a 95       	dec	r24
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_Write+0xf4>
 3c8:	20 95       	com	r18
 3ca:	29 23       	and	r18, r25
 3cc:	62 2b       	or	r22, r18
 3ce:	62 bb       	out	0x12, r22	; 18
				enuRetVar = E_OK;
 3d0:	81 e0       	ldi	r24, 0x01	; 1
			}
			break;
 3d2:	08 95       	ret
			}
		}
	}
	else
	{
		enuRetVar = E_ERROR;
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	08 95       	ret
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	08 95       	ret
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	08 95       	ret
				enuRetVar = E_OK;
			}
			break;
			default:
			{
				enuRetVar = E_ERROR;			
 3e0:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;
}
 3e2:	08 95       	ret

000003e4 <DIO_Read>:
enuErrorStatus_t DIO_Read(uint8_t u8GroupId, uint8_t* pu8Data)
{
	enuErrorStatus_t enuRetVar;
	const strDIOConfigType_t *pstrConfig;
	
	if((u8GroupId < DIO_GROUPS_NO) && (aenuDIOGroupState[u8GroupId] == DIO_INIT_DONE) && (astrDIOConfigParameters[u8GroupId].enuPinDir == INPUT))
 3e4:	84 30       	cpi	r24, 0x04	; 4
 3e6:	08 f0       	brcs	.+2      	; 0x3ea <DIO_Read+0x6>
 3e8:	84 c0       	rjmp	.+264    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	fc 01       	movw	r30, r24
 3ee:	e4 59       	subi	r30, 0x94	; 148
 3f0:	ff 4f       	sbci	r31, 0xFF	; 255
 3f2:	20 81       	ld	r18, Z
 3f4:	21 30       	cpi	r18, 0x01	; 1
 3f6:	09 f0       	breq	.+2      	; 0x3fa <DIO_Read+0x16>
 3f8:	7e c0       	rjmp	.+252    	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 3fa:	fc 01       	movw	r30, r24
 3fc:	ee 0f       	add	r30, r30
 3fe:	ff 1f       	adc	r31, r31
 400:	e8 0f       	add	r30, r24
 402:	f9 1f       	adc	r31, r25
 404:	e0 5a       	subi	r30, 0xA0	; 160
 406:	ff 4f       	sbci	r31, 0xFF	; 255
 408:	21 81       	ldd	r18, Z+1	; 0x01
 40a:	21 11       	cpse	r18, r1
 40c:	76 c0       	rjmp	.+236    	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
	{
		pstrConfig = &astrDIOConfigParameters[u8GroupId];
		switch(DIO_PORT_NO(pstrConfig->enuPinNo))
 40e:	fc 01       	movw	r30, r24
 410:	ee 0f       	add	r30, r30
 412:	ff 1f       	adc	r31, r31
 414:	8e 0f       	add	r24, r30
 416:	9f 1f       	adc	r25, r31
 418:	fc 01       	movw	r30, r24
 41a:	e0 5a       	subi	r30, 0xA0	; 160
 41c:	ff 4f       	sbci	r31, 0xFF	; 255
 41e:	80 81       	ld	r24, Z
 420:	98 2f       	mov	r25, r24
 422:	96 95       	lsr	r25
 424:	96 95       	lsr	r25
 426:	96 95       	lsr	r25
 428:	91 30       	cpi	r25, 0x01	; 1
 42a:	f1 f0       	breq	.+60     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 42c:	30 f0       	brcs	.+12     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 42e:	92 30       	cpi	r25, 0x02	; 2
 430:	91 f1       	breq	.+100    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 432:	93 30       	cpi	r25, 0x03	; 3
 434:	09 f4       	brne	.+2      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 436:	46 c0       	rjmp	.+140    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 438:	62 c0       	rjmp	.+196    	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
		{
			case PORTA:
			{
				/* Reading the value from the corresponding pin */
				*pu8Data = GET_BIT(PINA_R, DIO_PIN_NO(pstrConfig->enuPinNo));
 43a:	49 b3       	in	r20, 0x19	; 25
 43c:	87 70       	andi	r24, 0x07	; 7
 43e:	21 e0       	ldi	r18, 0x01	; 1
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	08 2e       	mov	r0, r24
 444:	02 c0       	rjmp	.+4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 446:	22 0f       	add	r18, r18
 448:	33 1f       	adc	r19, r19
 44a:	0a 94       	dec	r0
 44c:	e2 f7       	brpl	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	24 23       	and	r18, r20
 452:	35 23       	and	r19, r21
 454:	a9 01       	movw	r20, r18
 456:	02 c0       	rjmp	.+4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 458:	55 95       	asr	r21
 45a:	47 95       	ror	r20
 45c:	8a 95       	dec	r24
 45e:	e2 f7       	brpl	.-8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 460:	fb 01       	movw	r30, r22
 462:	40 83       	st	Z, r20
				enuRetVar = E_OK;
 464:	81 e0       	ldi	r24, 0x01	; 1
			}		
			break;	
 466:	08 95       	ret
			case PORTB:
			{
				/* Reading the value from the corresponding pin */
				*pu8Data = GET_BIT(PINB_R, DIO_PIN_NO(pstrConfig->enuPinNo));
 468:	46 b3       	in	r20, 0x16	; 22
 46a:	87 70       	andi	r24, 0x07	; 7
 46c:	21 e0       	ldi	r18, 0x01	; 1
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	08 2e       	mov	r0, r24
 472:	02 c0       	rjmp	.+4      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 474:	22 0f       	add	r18, r18
 476:	33 1f       	adc	r19, r19
 478:	0a 94       	dec	r0
 47a:	e2 f7       	brpl	.-8      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 47c:	50 e0       	ldi	r21, 0x00	; 0
 47e:	24 23       	and	r18, r20
 480:	35 23       	and	r19, r21
 482:	a9 01       	movw	r20, r18
 484:	02 c0       	rjmp	.+4      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 486:	55 95       	asr	r21
 488:	47 95       	ror	r20
 48a:	8a 95       	dec	r24
 48c:	e2 f7       	brpl	.-8      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 48e:	fb 01       	movw	r30, r22
 490:	40 83       	st	Z, r20
				enuRetVar = E_OK;
 492:	81 e0       	ldi	r24, 0x01	; 1
			}
			break;
 494:	08 95       	ret
			case PORTC:
			{
				/* Reading the value from the corresponding pin */
				*pu8Data = GET_BIT(PINC_R, DIO_PIN_NO(pstrConfig->enuPinNo));
 496:	43 b3       	in	r20, 0x13	; 19
 498:	87 70       	andi	r24, 0x07	; 7
 49a:	21 e0       	ldi	r18, 0x01	; 1
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	08 2e       	mov	r0, r24
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4a2:	22 0f       	add	r18, r18
 4a4:	33 1f       	adc	r19, r19
 4a6:	0a 94       	dec	r0
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 4aa:	50 e0       	ldi	r21, 0x00	; 0
 4ac:	24 23       	and	r18, r20
 4ae:	35 23       	and	r19, r21
 4b0:	a9 01       	movw	r20, r18
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4b4:	55 95       	asr	r21
 4b6:	47 95       	ror	r20
 4b8:	8a 95       	dec	r24
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4bc:	fb 01       	movw	r30, r22
 4be:	40 83       	st	Z, r20
				enuRetVar = E_OK;
 4c0:	81 e0       	ldi	r24, 0x01	; 1
			}
			break;
 4c2:	08 95       	ret
			case PORTD:
			{
				/* Reading the value from the corresponding pin */
				*pu8Data = GET_BIT(PIND_R, DIO_PIN_NO(pstrConfig->enuPinNo));
 4c4:	40 b3       	in	r20, 0x10	; 16
 4c6:	87 70       	andi	r24, 0x07	; 7
 4c8:	21 e0       	ldi	r18, 0x01	; 1
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	08 2e       	mov	r0, r24
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
 4d0:	22 0f       	add	r18, r18
 4d2:	33 1f       	adc	r19, r19
 4d4:	0a 94       	dec	r0
 4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4d8:	50 e0       	ldi	r21, 0x00	; 0
 4da:	24 23       	and	r18, r20
 4dc:	35 23       	and	r19, r21
 4de:	a9 01       	movw	r20, r18
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 4e2:	55 95       	asr	r21
 4e4:	47 95       	ror	r20
 4e6:	8a 95       	dec	r24
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 4ea:	fb 01       	movw	r30, r22
 4ec:	40 83       	st	Z, r20
				enuRetVar = E_OK;
 4ee:	81 e0       	ldi	r24, 0x01	; 1
			}
			break;
 4f0:	08 95       	ret
			}
		}
	}
	else
	{
		enuRetVar = E_ERROR;
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	08 95       	ret
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	08 95       	ret
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	08 95       	ret
				enuRetVar = E_OK;
			}
			break;
			default:
			{
				enuRetVar = E_ERROR;
 4fe:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;
}
 500:	08 95       	ret

00000502 <DIO_Toggle>:
{
	enuErrorStatus_t enuRetVar;
	const strDIOConfigType_t *pstrConfig;
	uint8_t u8Data;
	
	if((u8GroupId < DIO_GROUPS_NO) && (aenuDIOGroupState[u8GroupId] == DIO_INIT_DONE) && (astrDIOConfigParameters[u8GroupId].enuPinDir == OUTPUT))
 502:	84 30       	cpi	r24, 0x04	; 4
 504:	08 f0       	brcs	.+2      	; 0x508 <DIO_Toggle+0x6>
 506:	ba c0       	rjmp	.+372    	; 0x67c <DIO_Toggle+0x17a>
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	fc 01       	movw	r30, r24
 50c:	e4 59       	subi	r30, 0x94	; 148
 50e:	ff 4f       	sbci	r31, 0xFF	; 255
 510:	20 81       	ld	r18, Z
 512:	21 30       	cpi	r18, 0x01	; 1
 514:	09 f0       	breq	.+2      	; 0x518 <DIO_Toggle+0x16>
 516:	b4 c0       	rjmp	.+360    	; 0x680 <DIO_Toggle+0x17e>
 518:	fc 01       	movw	r30, r24
 51a:	ee 0f       	add	r30, r30
 51c:	ff 1f       	adc	r31, r31
 51e:	e8 0f       	add	r30, r24
 520:	f9 1f       	adc	r31, r25
 522:	e0 5a       	subi	r30, 0xA0	; 160
 524:	ff 4f       	sbci	r31, 0xFF	; 255
 526:	21 81       	ldd	r18, Z+1	; 0x01
 528:	21 30       	cpi	r18, 0x01	; 1
 52a:	09 f0       	breq	.+2      	; 0x52e <DIO_Toggle+0x2c>
 52c:	ab c0       	rjmp	.+342    	; 0x684 <DIO_Toggle+0x182>
	{
		pstrConfig = &astrDIOConfigParameters[u8GroupId];
		switch(DIO_PORT_NO(pstrConfig->enuPinNo))
 52e:	fc 01       	movw	r30, r24
 530:	ee 0f       	add	r30, r30
 532:	ff 1f       	adc	r31, r31
 534:	8e 0f       	add	r24, r30
 536:	9f 1f       	adc	r25, r31
 538:	fc 01       	movw	r30, r24
 53a:	e0 5a       	subi	r30, 0xA0	; 160
 53c:	ff 4f       	sbci	r31, 0xFF	; 255
 53e:	80 81       	ld	r24, Z
 540:	98 2f       	mov	r25, r24
 542:	96 95       	lsr	r25
 544:	96 95       	lsr	r25
 546:	96 95       	lsr	r25
 548:	91 30       	cpi	r25, 0x01	; 1
 54a:	61 f1       	breq	.+88     	; 0x5a4 <DIO_Toggle+0xa2>
 54c:	38 f0       	brcs	.+14     	; 0x55c <DIO_Toggle+0x5a>
 54e:	92 30       	cpi	r25, 0x02	; 2
 550:	09 f4       	brne	.+2      	; 0x554 <DIO_Toggle+0x52>
 552:	4c c0       	rjmp	.+152    	; 0x5ec <DIO_Toggle+0xea>
 554:	93 30       	cpi	r25, 0x03	; 3
 556:	09 f4       	brne	.+2      	; 0x55a <DIO_Toggle+0x58>
 558:	6d c0       	rjmp	.+218    	; 0x634 <DIO_Toggle+0x132>
 55a:	96 c0       	rjmp	.+300    	; 0x688 <DIO_Toggle+0x186>
		{
			case PORTA:
			{
				/* Reading the value from the corresponding pin */
				u8Data = GET_BIT(PINA_R, DIO_PIN_NO(pstrConfig->enuPinNo));
 55c:	29 b3       	in	r18, 0x19	; 25
 55e:	87 70       	andi	r24, 0x07	; 7
 560:	41 e0       	ldi	r20, 0x01	; 1
 562:	50 e0       	ldi	r21, 0x00	; 0
 564:	08 2e       	mov	r0, r24
 566:	02 c0       	rjmp	.+4      	; 0x56c <DIO_Toggle+0x6a>
 568:	44 0f       	add	r20, r20
 56a:	55 1f       	adc	r21, r21
 56c:	0a 94       	dec	r0
 56e:	e2 f7       	brpl	.-8      	; 0x568 <DIO_Toggle+0x66>
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	24 23       	and	r18, r20
 574:	35 23       	and	r19, r21
 576:	08 2e       	mov	r0, r24
 578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_Toggle+0x7c>
 57a:	35 95       	asr	r19
 57c:	27 95       	ror	r18
 57e:	0a 94       	dec	r0
 580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_Toggle+0x78>
				/* Writing the value into the corresponding pin */
				ASSIGN_BIT(PORTA_R, DIO_PIN_NO(pstrConfig->enuPinNo), ~u8Data);
 582:	5b b3       	in	r21, 0x1b	; 27
 584:	33 27       	eor	r19, r19
 586:	20 95       	com	r18
 588:	30 95       	com	r19
 58a:	b9 01       	movw	r22, r18
 58c:	02 c0       	rjmp	.+4      	; 0x592 <DIO_Toggle+0x90>
 58e:	66 0f       	add	r22, r22
 590:	77 1f       	adc	r23, r23
 592:	8a 95       	dec	r24
 594:	e2 f7       	brpl	.-8      	; 0x58e <DIO_Toggle+0x8c>
 596:	cb 01       	movw	r24, r22
 598:	40 95       	com	r20
 59a:	45 23       	and	r20, r21
 59c:	84 2b       	or	r24, r20
 59e:	8b bb       	out	0x1b, r24	; 27
				enuRetVar = E_OK;
 5a0:	81 e0       	ldi	r24, 0x01	; 1
			}
			break;
 5a2:	08 95       	ret
			case PORTB:
			{
				/* Reading the value from the corresponding pin */
				u8Data = GET_BIT(PINB_R, DIO_PIN_NO(pstrConfig->enuPinNo));
 5a4:	26 b3       	in	r18, 0x16	; 22
 5a6:	87 70       	andi	r24, 0x07	; 7
 5a8:	41 e0       	ldi	r20, 0x01	; 1
 5aa:	50 e0       	ldi	r21, 0x00	; 0
 5ac:	08 2e       	mov	r0, r24
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_Toggle+0xb2>
 5b0:	44 0f       	add	r20, r20
 5b2:	55 1f       	adc	r21, r21
 5b4:	0a 94       	dec	r0
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_Toggle+0xae>
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	24 23       	and	r18, r20
 5bc:	35 23       	and	r19, r21
 5be:	08 2e       	mov	r0, r24
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_Toggle+0xc4>
 5c2:	35 95       	asr	r19
 5c4:	27 95       	ror	r18
 5c6:	0a 94       	dec	r0
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_Toggle+0xc0>
				/* Writing the value into the corresponding pin */
				ASSIGN_BIT(PORTB_R, DIO_PIN_NO(pstrConfig->enuPinNo), ~u8Data);
 5ca:	58 b3       	in	r21, 0x18	; 24
 5cc:	33 27       	eor	r19, r19
 5ce:	20 95       	com	r18
 5d0:	30 95       	com	r19
 5d2:	b9 01       	movw	r22, r18
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_Toggle+0xd8>
 5d6:	66 0f       	add	r22, r22
 5d8:	77 1f       	adc	r23, r23
 5da:	8a 95       	dec	r24
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <DIO_Toggle+0xd4>
 5de:	cb 01       	movw	r24, r22
 5e0:	40 95       	com	r20
 5e2:	45 23       	and	r20, r21
 5e4:	84 2b       	or	r24, r20
 5e6:	88 bb       	out	0x18, r24	; 24
				enuRetVar = E_OK;
 5e8:	81 e0       	ldi	r24, 0x01	; 1
			}
			break;
 5ea:	08 95       	ret
			case PORTC:
			{
				/* Reading the value from the corresponding pin */
				u8Data = GET_BIT(PINC_R, DIO_PIN_NO(pstrConfig->enuPinNo));
 5ec:	23 b3       	in	r18, 0x13	; 19
 5ee:	87 70       	andi	r24, 0x07	; 7
 5f0:	41 e0       	ldi	r20, 0x01	; 1
 5f2:	50 e0       	ldi	r21, 0x00	; 0
 5f4:	08 2e       	mov	r0, r24
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <DIO_Toggle+0xfa>
 5f8:	44 0f       	add	r20, r20
 5fa:	55 1f       	adc	r21, r21
 5fc:	0a 94       	dec	r0
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <DIO_Toggle+0xf6>
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	24 23       	and	r18, r20
 604:	35 23       	and	r19, r21
 606:	08 2e       	mov	r0, r24
 608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_Toggle+0x10c>
 60a:	35 95       	asr	r19
 60c:	27 95       	ror	r18
 60e:	0a 94       	dec	r0
 610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_Toggle+0x108>
				/* Writing the value into the corresponding pin */
				ASSIGN_BIT(PORTC_R, DIO_PIN_NO(pstrConfig->enuPinNo), ~u8Data);
 612:	55 b3       	in	r21, 0x15	; 21
 614:	33 27       	eor	r19, r19
 616:	20 95       	com	r18
 618:	30 95       	com	r19
 61a:	b9 01       	movw	r22, r18
 61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_Toggle+0x120>
 61e:	66 0f       	add	r22, r22
 620:	77 1f       	adc	r23, r23
 622:	8a 95       	dec	r24
 624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_Toggle+0x11c>
 626:	cb 01       	movw	r24, r22
 628:	40 95       	com	r20
 62a:	45 23       	and	r20, r21
 62c:	84 2b       	or	r24, r20
 62e:	85 bb       	out	0x15, r24	; 21
				enuRetVar = E_OK;
 630:	81 e0       	ldi	r24, 0x01	; 1
			}
			break;
 632:	08 95       	ret
			case PORTD:
			{
				/* Reading the value from the corresponding pin */
				u8Data = GET_BIT(PIND_R, DIO_PIN_NO(pstrConfig->enuPinNo));
 634:	20 b3       	in	r18, 0x10	; 16
 636:	87 70       	andi	r24, 0x07	; 7
 638:	41 e0       	ldi	r20, 0x01	; 1
 63a:	50 e0       	ldi	r21, 0x00	; 0
 63c:	08 2e       	mov	r0, r24
 63e:	02 c0       	rjmp	.+4      	; 0x644 <DIO_Toggle+0x142>
 640:	44 0f       	add	r20, r20
 642:	55 1f       	adc	r21, r21
 644:	0a 94       	dec	r0
 646:	e2 f7       	brpl	.-8      	; 0x640 <DIO_Toggle+0x13e>
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	24 23       	and	r18, r20
 64c:	35 23       	and	r19, r21
 64e:	08 2e       	mov	r0, r24
 650:	02 c0       	rjmp	.+4      	; 0x656 <DIO_Toggle+0x154>
 652:	35 95       	asr	r19
 654:	27 95       	ror	r18
 656:	0a 94       	dec	r0
 658:	e2 f7       	brpl	.-8      	; 0x652 <DIO_Toggle+0x150>
				/* Writing the value into the corresponding pin */
				ASSIGN_BIT(PORTD_R, DIO_PIN_NO(pstrConfig->enuPinNo), ~u8Data);
 65a:	52 b3       	in	r21, 0x12	; 18
 65c:	33 27       	eor	r19, r19
 65e:	20 95       	com	r18
 660:	30 95       	com	r19
 662:	b9 01       	movw	r22, r18
 664:	02 c0       	rjmp	.+4      	; 0x66a <DIO_Toggle+0x168>
 666:	66 0f       	add	r22, r22
 668:	77 1f       	adc	r23, r23
 66a:	8a 95       	dec	r24
 66c:	e2 f7       	brpl	.-8      	; 0x666 <DIO_Toggle+0x164>
 66e:	cb 01       	movw	r24, r22
 670:	40 95       	com	r20
 672:	45 23       	and	r20, r21
 674:	84 2b       	or	r24, r20
 676:	82 bb       	out	0x12, r24	; 18
				enuRetVar = E_OK;
 678:	81 e0       	ldi	r24, 0x01	; 1
			}
			break;
 67a:	08 95       	ret
			}
		}
	}
	else
	{
		enuRetVar = E_ERROR;
 67c:	80 e0       	ldi	r24, 0x00	; 0
 67e:	08 95       	ret
 680:	80 e0       	ldi	r24, 0x00	; 0
 682:	08 95       	ret
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	08 95       	ret
				enuRetVar = E_OK;
			}
			break;
			default:
			{
				enuRetVar = E_ERROR;
 688:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;	
 68a:	08 95       	ret

0000068c <main>:
#include "DIO.h"


int main(void)
{
 68c:	cf 93       	push	r28
 68e:	df 93       	push	r29
 690:	00 d0       	rcall	.+0      	; 0x692 <main+0x6>
 692:	cd b7       	in	r28, 0x3d	; 61
 694:	de b7       	in	r29, 0x3e	; 62
    DIO_Init();
 696:	0e 94 49 00 	call	0x92	; 0x92 <DIO_Init>
	
	uint8_t u8Button1;
	uint8_t u8Button2;
	while(1)
	{
		DIO_Read(0, &u8Button1);
 69a:	be 01       	movw	r22, r28
 69c:	6f 5f       	subi	r22, 0xFF	; 255
 69e:	7f 4f       	sbci	r23, 0xFF	; 255
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_Read>
		DIO_Read(2, &u8Button2);	
 6a6:	be 01       	movw	r22, r28
 6a8:	6e 5f       	subi	r22, 0xFE	; 254
 6aa:	7f 4f       	sbci	r23, 0xFF	; 255
 6ac:	82 e0       	ldi	r24, 0x02	; 2
 6ae:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_Read>
		if(u8Button1 == LOW)
 6b2:	89 81       	ldd	r24, Y+1	; 0x01
 6b4:	81 11       	cpse	r24, r1
 6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <main+0x36>
		{
			DIO_Write(1, HIGH);
 6b8:	61 e0       	ldi	r22, 0x01	; 1
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	0e 94 66 01 	call	0x2cc	; 0x2cc <DIO_Write>
 6c0:	04 c0       	rjmp	.+8      	; 0x6ca <main+0x3e>
		}
		else
		{
			DIO_Write(1, LOW);
 6c2:	60 e0       	ldi	r22, 0x00	; 0
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	0e 94 66 01 	call	0x2cc	; 0x2cc <DIO_Write>
		}
		if(u8Button2 == LOW)
 6ca:	8a 81       	ldd	r24, Y+2	; 0x02
 6cc:	81 11       	cpse	r24, r1
 6ce:	e5 cf       	rjmp	.-54     	; 0x69a <main+0xe>
		{
			DIO_Toggle(3);
 6d0:	83 e0       	ldi	r24, 0x03	; 3
 6d2:	0e 94 81 02 	call	0x502	; 0x502 <DIO_Toggle>
			do 
			{
				DIO_Read(2, &u8Button2);
 6d6:	be 01       	movw	r22, r28
 6d8:	6e 5f       	subi	r22, 0xFE	; 254
 6da:	7f 4f       	sbci	r23, 0xFF	; 255
 6dc:	82 e0       	ldi	r24, 0x02	; 2
 6de:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_Read>

			} while(u8Button2 == LOW);
 6e2:	8a 81       	ldd	r24, Y+2	; 0x02
 6e4:	88 23       	and	r24, r24
 6e6:	b9 f3       	breq	.-18     	; 0x6d6 <main+0x4a>
 6e8:	d8 cf       	rjmp	.-80     	; 0x69a <main+0xe>

000006ea <_exit>:
 6ea:	f8 94       	cli

000006ec <__stop_program>:
 6ec:	ff cf       	rjmp	.-2      	; 0x6ec <__stop_program>
